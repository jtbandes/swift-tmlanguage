<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>comment</key>
    <string>See swift.tmbundle/grammar-test.swift for test cases.</string>
    <key>fileTypes</key>
    <array>
      <string>swift</string>
    </array>
    <key>firstLineMatch</key>
    <string>^#!/.*\bswift</string>
    <key>keyEquivalent</key>
    <string>^~S</string>
    <key>scopeName</key>
    <string>source.swift</string>
    <key>uuid</key>
    <string>8C743E89-9C8D-4833-8149-6500D82AA463</string>
    <key>name</key>
    <string>Swift</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#root</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>async-throws</key>
      <dict>
        <key>match</key>
        <string>\b(?:(throws\s+async|rethrows\s+async)|(throws|rethrows)|(async))\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.await-must-precede-throws.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.exception.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.swift</string>
          </dict>
        </dict>
      </dict>
      <key>attributes</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.attribute.available.swift</string>
            <key>begin</key>
            <string>((@)available)(\()</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.attribute.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.attribute.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\b(swift|(?:iOS|macOS|OSX|watchOS|tvOS|visionOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.platform.os.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>constant.numeric.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>begin</key>
                <string>\b(introduced|deprecated|obsoleted)\s*(:)\s*</string>
                <key>end</key>
                <string>(?!\G)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.key-value.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>constant.numeric.swift</string>
                    <key>match</key>
                    <string>\b[0-9]+(?:\.[0-9]+)*\b</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\b(message|renamed)\s*(:)\s*(?=")</string>
                <key>end</key>
                <string>(?!\G)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.key-value.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#literals</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>match</key>
                <string>(?:(\*)|\b(deprecated|unavailable|noasync)\b)\s*(.*?)(?=[,)])</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.platform.all.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.swift</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.character-not-allowed-here.swift</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.attribute.objc.swift</string>
            <key>begin</key>
            <string>((@)objc)(\()</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.attribute.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.attribute.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.name.function.swift</string>
                <key>match</key>
                <string>\w*(?::(?:\w*:)*(\w*))?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.missing-colon-after-selector-piece.swift</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>any other attribute</string>
            <key>name</key>
            <string>meta.attribute.swift</string>
            <key>begin</key>
            <string>(@)(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)</string>
            <key>end</key>
            <string>(?!\G\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.attribute.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.attribute.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.arguments.attribute.swift</string>
                <key>begin</key>
                <string>\(</string>
                <key>end</key>
                <string>\)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.arguments.begin.swift</string>
                  </dict>
                </dict>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.arguments.end.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expressions</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>builtin-functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Member functions in the standard library in Swift 3 which may be used with trailing closures and no parentheses</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:s(?:ort(?:ed)?|plit)|contains|index|partition|f(?:i(?:lter|rst)|orEach|latMap)|with(?:MutableCharacters|CString|U(?:nsafe(?:Mutable(?:BufferPointer|Pointer(?:s|To(?:Header|Elements)))|BufferPointer)|TF8Buffer))|m(?:in|a(?:p|x)))(?=\s*[({])\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Member functions in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:s(?:ymmetricDifference|t(?:oreBytes|arts|ride)|ortInPlace|u(?:ccessor|ffix|btract(?:ing|InPlace|WithOverflow)?)|quareRoot|amePosition)|h(?:oldsUnique(?:Reference|OrPinnedReference)|as(?:Suffix|Prefix))|ne(?:gate(?:d)?|xt)|c(?:o(?:untByEnumerating|py(?:Bytes)?)|lamp(?:ed)?|reate)|t(?:o(?:IntMax|Opaque|UIntMax)|ake(?:RetainedValue|UnretainedValue)|r(?:uncatingRemainder|a(?:nscodedLength|ilSurrogate)))|i(?:s(?:MutableAndUniquelyReferenced(?:OrPinned)?|S(?:trictSu(?:perset(?:Of)?|bset(?:Of)?)|u(?:perset(?:Of)?|bset(?:Of)?))|Continuation|T(?:otallyOrdered|railSurrogate)|Disjoint(?:With)?|Unique(?:Reference|lyReferenced(?:OrPinned)?)|Equal|Le(?:ss(?:ThanOrEqualTo)?|adSurrogate))|n(?:sert(?:ContentsOf)?|tersect(?:ion|InPlace)?|itialize(?:Memory|From)?|dex(?:Of|ForKey)))|o(?:verlaps|bjectAt)|d(?:i(?:stance(?:To)?|vide(?:d|WithOverflow)?)|e(?:s(?:cendant|troy)|code(?:CString)?|initialize|alloc(?:ate(?:Capacity)?)?)|rop(?:First|Last))|u(?:n(?:ion(?:InPlace)?|derestimateCount|wrappedOrError)|p(?:date(?:Value)?|percased))|join(?:ed|WithSeparator)|p(?:op(?:First|Last)|ass(?:Retained|Unretained)|re(?:decessor|fix))|e(?:scape(?:d)?|n(?:code|umerate(?:d)?)|lementsEqual|xclusiveOr(?:InPlace)?)|f(?:orm(?:Remainder|S(?:ymmetricDifference|quareRoot)|TruncatingRemainder|In(?:tersection|dex)|Union)|latten|rom(?:CString(?:RepairingIllFormedUTF8)?|Opaque))|w(?:i(?:thMemoryRebound|dth)|rite(?:To)?)|l(?:o(?:wercased|ad)|e(?:adSurrogate|xicographical(?:Compare|lyPrecedes)))|a(?:ss(?:ign(?:BackwardFrom|From)?|umingMemoryBound)|d(?:d(?:ing(?:Product)?|Product|WithOverflow)?|vanced(?:By)?)|utorelease|ppend(?:ContentsOf)?|lloc(?:ate)?|bs)|r(?:ound(?:ed)?|e(?:serveCapacity|tain|duce|place(?:Range|Subrange)?|verse(?:d)?|quest(?:NativeBuffer|UniqueMutableBackingBuffer)|lease|m(?:ove(?:Range|Subrange|Value(?:ForKey)?|First|Last|A(?:tIndex|ll))?|ainder(?:WithOverflow)?)))|ge(?:nerate|t(?:Objects|Element))|m(?:in(?:imum(?:Magnitude)?|Element)|ove(?:Initialize(?:Memory|BackwardFrom|From)?|Assign(?:From)?)?|ultipl(?:y(?:WithOverflow)?|ied)|easure|a(?:ke(?:Iterator|Description)|x(?:imum(?:Magnitude)?|Element)))|bindMemory)(?=\s*\()</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Member functions in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:s(?:uperclassMirror|amePositionIn|tartsWith)|nextObject|c(?:haracterAtIndex|o(?:untByEnumeratingWithState|pyWithZone)|ustom(?:Mirror|PlaygroundQuickLook))|is(?:EmptyInput|ASCII)|object(?:Enumerator|ForKey|AtIndex)|join|put|keyEnumerator|withUnsafeMutablePointerToValue|length|getMirror|m(?:oveInitializeAssignFrom|ember))(?=\s*\()</string>
          </dict>
        </array>
      </dict>
      <key>builtin-global-functions</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\b(type)(\()\s*(of)(:)</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.dynamic-type.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.variable.parameter.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Global functions available in Swift 3 which may be used with trailing closures and no parentheses</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>\b(?:anyGenerator|autoreleasepool)(?=\s*[({])\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Global functions available in Swift 3</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>\b(?:s(?:tride(?:of(?:Value)?)?|izeof(?:Value)?|equence|wap)|numericCast|transcode|is(?:UniquelyReferenced(?:NonObjC)?|KnownUniquelyReferenced)|zip|d(?:ump|ebugPrint)|unsafe(?:BitCast|Downcast|Unwrap|Address(?:Of)?)|pr(?:int|econdition(?:Failure)?)|fatalError|with(?:Unsafe(?:MutablePointer|Pointer)|ExtendedLifetime|VaList)|a(?:ssert(?:ionFailure)?|lignof(?:Value)?|bs)|re(?:peatElement|adLine)|getVaList|m(?:in|ax))(?=\s*\()</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Global functions available in Swift 2 only</string>
            <key>name</key>
            <string>support.function.swift</string>
            <key>match</key>
            <string>\b(?:s(?:ort|uffix|pli(?:ce|t))|insert|overlaps|d(?:istance|rop(?:First|Last))|join|prefix|extend|withUnsafe(?:MutablePointers|Pointers)|lazy|advance|re(?:flect|move(?:Range|Last|A(?:tIndex|ll))))(?=\s*\()</string>
          </dict>
        </array>
      </dict>
      <key>builtin-properties</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>The simpler (?&lt;=\bProcess\.|\bCommandLine\.) breaks VS Code / Atom, see https://github.com/textmate/swift.tmbundle/issues/29</string>
            <key>name</key>
            <string>support.variable.swift</string>
            <key>match</key>
            <string>(?&lt;=^Process\.|\WProcess\.|^CommandLine\.|\WCommandLine\.)(arguments|argc|unsafeArgv)</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Properties in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.variable.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:s(?:t(?:artIndex|ri(?:ngValue|de))|i(?:ze|gn(?:BitIndex|ificand(?:Bit(?:Count|Pattern)|Width)?|alingNaN)?)|u(?:perclassMirror|mmary|bscriptBaseAddress))|h(?:eader|as(?:hValue|PointerRepresentation))|n(?:ulTerminatedUTF8|ext(?:Down|Up)|a(?:n|tiveOwner))|c(?:haracters|ount(?:TrailingZeros)?|ustom(?:Mirror|PlaygroundQuickLook)|apacity)|i(?:s(?:S(?:ign(?:Minus|aling(?:NaN)?)|ubnormal)|N(?:ormal|aN)|Canonical|Infinite|Zero|Empty|Finite|ASCII)|n(?:dices|finity)|dentity)|owner|de(?:scription|bugDescription)|u(?:n(?:safelyUnwrapped|icodeScalar(?:s)?|derestimatedCount)|tf(?:16|8(?:Start|C(?:String|odeUnitCount))?)|intValue|ppercaseString|lp(?:OfOne)?)|p(?:i|ointee)|e(?:ndIndex|lements|xponent(?:Bit(?:Count|Pattern))?)|value(?:s)?|keys|quietNaN|f(?:irst(?:ElementAddress(?:IfContiguous)?)?|loatingPointClass)|l(?:ittleEndian|owercaseString|eastNo(?:nzeroMagnitude|rmalMagnitude)|a(?:st|zy))|a(?:l(?:ignment|l(?:ocatedElementCount|Zeros))|rray(?:PropertyIsNativeTypeChecked)?)|ra(?:dix|wValue)|greatestFiniteMagnitude|m(?:in|emory|ax)|b(?:yteS(?:ize|wapped)|i(?:nade|tPattern|gEndian)|uffer|ase(?:Address)?))\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Properties in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.variable.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:boolValue|disposition|end|objectIdentifier|quickLookObject|start|valueType)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Enum cases in the standard library - note that there is some overlap between these and the properties</string>
            <key>name</key>
            <string>support.variable.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:s(?:calarValue|i(?:ze|gnalingNaN)|o(?:und|me)|uppressed|prite|et)|n(?:one|egative(?:Subnormal|Normal|Infinity|Zero))|c(?:ol(?:or|lection)|ustomized)|t(?:o(?:NearestOr(?:Even|AwayFromZero)|wardZero)|uple|ext)|i(?:nt|mage)|optional|d(?:ictionary|o(?:uble|wn))|u(?:Int|p|rl)|p(?:o(?:sitive(?:Subnormal|Normal|Infinity|Zero)|int)|lus)|e(?:rror|mptyInput)|view|quietNaN|float|a(?:ttributedString|wayFromZero)|r(?:ectangle|ange)|generated|minus|b(?:ool|ezierPath))\b</string>
          </dict>
        </array>
      </dict>
      <key>builtin-types</key>
      <dict>
        <key>comment</key>
        <string>Types provided in the standard library</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#builtin-types-builtin-class-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types-builtin-enum-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types-builtin-protocol-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types-builtin-struct-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types-builtin-typealias</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.type.any.swift</string>
            <key>match</key>
            <string>\bAny\b</string>
          </dict>
        </array>
      </dict>
      <key>builtin-types-builtin-class-type</key>
      <dict>
        <key>comment</key>
        <string>Builtin class types</string>
        <key>name</key>
        <string>support.class.swift</string>
        <key>match</key>
        <string>\b(Managed(Buffer|ProtoBuffer)|NonObjectiveCBase|AnyGenerator)\b</string>
      </dict>
      <key>builtin-types-builtin-enum-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>CommandLine is an enum, but it acts like a constant</string>
            <key>name</key>
            <string>support.constant.swift</string>
            <key>match</key>
            <string>\b(?:CommandLine|Process(?=\.))\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>The return type of a function that never returns</string>
            <key>name</key>
            <string>support.constant.never.swift</string>
            <key>match</key>
            <string>\bNever\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Enum types in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:ImplicitlyUnwrappedOptional|Representation|MemoryLayout|FloatingPointClassification|SetIndexRepresentation|SetIteratorRepresentation|FloatingPointRoundingRule|UnicodeDecodingResult|Optional|DictionaryIndexRepresentation|AncestorRepresentation|DisplayStyle|PlaygroundQuickLook|Never|FloatingPointSign|Bit|DictionaryIteratorRepresentation)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Enum types in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:MirrorDisposition|QuickLookObject)\b</string>
          </dict>
        </array>
      </dict>
      <key>builtin-types-builtin-protocol-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Protocols in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:Ra(?:n(?:domAccess(?:Collection|Indexable)|geReplaceable(?:Collection|Indexable))|wRepresentable)|M(?:irrorPath|utable(?:Collection|Indexable))|Bi(?:naryFloatingPoint|twiseOperations|directional(?:Collection|Indexable))|S(?:tr(?:ideable|eamable)|igned(?:Number|Integer)|e(?:tAlgebra|quence))|Hashable|C(?:o(?:llection|mparable)|ustom(?:Reflectable|StringConvertible|DebugStringConvertible|PlaygroundQuickLookable|LeafReflectable)|VarArg)|TextOutputStream|I(?:n(?:teger(?:Arithmetic)?|dexable(?:Base)?)|teratorProtocol)|OptionSet|Un(?:signedInteger|icodeCodec)|E(?:quatable|rror|xpressibleBy(?:BooleanLiteral|String(?:Interpolation|Literal)|NilLiteral|IntegerLiteral|DictionaryLiteral|UnicodeScalarLiteral|ExtendedGraphemeClusterLiteral|FloatLiteral|ArrayLiteral))|FloatingPoint|L(?:osslessStringConvertible|azy(?:SequenceProtocol|CollectionProtocol))|A(?:nyObject|bsoluteValuable))\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Protocols in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:Ran(?:domAccessIndexType|geReplaceableCollectionType)|GeneratorType|M(?:irror(?:Type|PathType)|utable(?:Sliceable|CollectionType))|B(?:i(?:twiseOperationsType|directionalIndexType)|oolean(?:Type|LiteralConvertible))|S(?:tring(?:InterpolationConvertible|LiteralConvertible)|i(?:nkType|gned(?:NumberType|IntegerType))|e(?:tAlgebraType|quenceType)|liceable)|NilLiteralConvertible|C(?:ollectionType|VarArgType)|Inte(?:rvalType|ger(?:Type|LiteralConvertible|ArithmeticType))|O(?:utputStreamType|ptionSetType)|DictionaryLiteralConvertible|Un(?:signedIntegerType|icode(?:ScalarLiteralConvertible|CodecType))|E(?:rrorType|xten(?:sibleCollectionType|dedGraphemeClusterLiteralConvertible))|F(?:orwardIndexType|loat(?:ingPointType|LiteralConvertible))|A(?:nyCollectionType|rrayLiteralConvertible))\b</string>
          </dict>
        </array>
      </dict>
      <key>builtin-types-builtin-struct-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Structs in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:R(?:e(?:peat(?:ed)?|versed(?:RandomAccess(?:Collection|Index)|Collection|Index))|an(?:domAccessSlice|ge(?:Replaceable(?:RandomAccessSlice|BidirectionalSlice|Slice)|Generator)?))|Generator(?:Sequence|OfOne)|M(?:irror|utable(?:Ran(?:domAccessSlice|geReplaceable(?:RandomAccessSlice|BidirectionalSlice|Slice))|BidirectionalSlice|Slice)|anagedBufferPointer)|B(?:idirectionalSlice|ool)|S(?:t(?:aticString|ri(?:ng|deT(?:hrough(?:Generator|Iterator)?|o(?:Generator|Iterator)?)))|et(?:I(?:ndex|terator))?|lice)|HalfOpenInterval|C(?:haracter(?:View)?|o(?:ntiguousArray|untable(?:Range|ClosedRange)|llectionOfOne)|OpaquePointer|losed(?:Range(?:I(?:ndex|terator))?|Interval)|VaListPointer)|I(?:n(?:t(?:16|8|32|64)?|d(?:ices|ex(?:ing(?:Generator|Iterator))?))|terator(?:Sequence|OverOne)?)|Zip2(?:Sequence|Iterator)|O(?:paquePointer|bjectIdentifier)|D(?:ictionary(?:I(?:ndex|terator)|Literal)?|ouble|efault(?:RandomAccessIndices|BidirectionalIndices|Indices))|U(?:n(?:safe(?:RawPointer|Mutable(?:RawPointer|BufferPointer|Pointer)|BufferPointer(?:Generator|Iterator)?|Pointer)|icodeScalar(?:View)?|foldSequence|managed)|TF(?:16(?:View)?|8(?:View)?|32)|Int(?:16|8|32|64)?)|Join(?:Generator|ed(?:Sequence|Iterator))|PermutationGenerator|E(?:numerate(?:Generator|Sequence|d(?:Sequence|Iterator))|mpty(?:Generator|Collection|Iterator))|Fl(?:oat(?:80)?|atten(?:Generator|BidirectionalCollection(?:Index)?|Sequence|Collection(?:Index)?|Iterator))|L(?:egacyChildren|azy(?:RandomAccessCollection|Map(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Collection|Iterator)|BidirectionalCollection|Sequence|Collection|Filter(?:Generator|BidirectionalCollection|Sequence|Collection|I(?:ndex|terator))))|A(?:ny(?:RandomAccessCollection|Generator|BidirectionalCollection|Sequence|Hashable|Collection|I(?:ndex|terator))|utoreleasingUnsafeMutablePointer|rray(?:Slice)?))\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Structs in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:R(?:everse(?:RandomAccess(?:Collection|Index)|Collection|Index)|awByte)|Map(?:Generator|Sequence|Collection)|S(?:inkOf|etGenerator)|Zip2Generator|DictionaryGenerator|Filter(?:Generator|Sequence|Collection(?:Index)?)|LazyForwardCollection|Any(?:RandomAccessIndex|BidirectionalIndex|Forward(?:Collection|Index)))\b</string>
          </dict>
        </array>
      </dict>
      <key>builtin-types-builtin-typealias</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Typealiases in the standard library in Swift 3</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:Raw(?:Significand|Exponent|Value)|B(?:ooleanLiteralType|uffer|ase)|S(?:t(?:orage|r(?:i(?:ngLiteralType|de)|eam(?:1|2)))|ubSequence)|NativeBuffer|C(?:hild(?:ren)?|Bool|S(?:hort|ignedChar)|odeUnit|Char(?:16|32)?|Int|Double|Unsigned(?:Short|Char|Int|Long(?:Long)?)|Float|WideChar|Long(?:Long)?)|I(?:n(?:t(?:Max|egerLiteralType)|d(?:ices|ex(?:Distance)?))|terator)|Distance|U(?:n(?:icodeScalar(?:Type|Index|View|LiteralType)|foldFirstSequence)|TF(?:16(?:Index|View)|8Index)|IntMax)|E(?:lement(?:s)?|x(?:tendedGraphemeCluster(?:Type|LiteralType)|ponent))|V(?:oid|alue)|Key|Float(?:32|LiteralType|64)|AnyClass)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Typealiases in the standard library in Swift 2 only</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:Generator|PlaygroundQuickLook|UWord|Word)\b</string>
          </dict>
        </array>
      </dict>
      <key>code-block</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>end</key>
        <string>\}</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.scope.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.scope.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>$self</string>
          </dict>
        </array>
      </dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.line.number-sign.swift</string>
            <key>match</key>
            <string>\A^(#!).*$\n?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.documentation.swift</string>
            <key>begin</key>
            <string>/\*\*(?!/)</string>
            <key>end</key>
            <string>\*/</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments-nested</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.documentation.playground.swift</string>
            <key>begin</key>
            <string>/\*:</string>
            <key>end</key>
            <string>\*/</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments-nested</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.swift</string>
            <key>begin</key>
            <string>/\*</string>
            <key>end</key>
            <string>\*/</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments-nested</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.unexpected-end-of-block-comment.swift</string>
            <key>match</key>
            <string>\*/</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^[ \t]+)?(?=//)</string>
            <key>end</key>
            <string>(?!\G)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>comment.line.triple-slash.documentation.swift</string>
                <key>begin</key>
                <string>///</string>
                <key>end</key>
                <string>$</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.documentation.swift</string>
                <key>begin</key>
                <string>//:</string>
                <key>end</key>
                <string>$</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.swift</string>
                <key>begin</key>
                <string>//</string>
                <key>end</key>
                <string>$</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.comment.swift</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>comments-nested</key>
      <dict>
        <key>begin</key>
        <string>/\*</string>
        <key>end</key>
        <string>\*/</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments-nested</string>
          </dict>
        </array>
      </dict>
      <key>compiler-control</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>contentName</key>
            <string>comment.block.preprocessor.swift</string>
            <key>begin</key>
            <string>^\s*(#)(if|elseif)\s+(false)\b.*?(?=$|//|/\*)</string>
            <key>end</key>
            <string>(?=^\s*(#(elseif|else|endif)\b))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.preprocessor.conditional.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.preprocessor.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.preprocessor.conditional.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.language.boolean.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.conditional.swift</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.preprocessor.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.preprocessor.conditional.swift</string>
              </dict>
            </dict>
            <key>begin</key>
            <string>^\s*(#)(if|elseif)\s+</string>
            <key>end</key>
            <string>(?=\s*(?://|/\*))|$</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>keyword.operator.logical.swift</string>
                <key>match</key>
                <string>(&amp;&amp;|\|\|)</string>
              </dict>
              <dict>
                <key>name</key>
                <string>constant.language.boolean.swift</string>
                <key>match</key>
                <string>\b(true|false)\b</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(arch)\s*(\()\s*(?:(arm|arm64|powerpc64|powerpc64le|i386|x86_64|s390x)|\w+)\s*(\))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.condition.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.swift</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>support.constant.platform.architecture.swift</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(os)\s*(\()\s*(?:(macOS|OSX|iOS|tvOS|watchOS|visionOS|Android|Linux|FreeBSD|Windows|PS4)|\w+)\s*(\))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.condition.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.swift</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>support.constant.platform.os.swift</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(canImport)\s*(\()([\p{L}_][\p{L}_\p{N}\p{M}]*)(\))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.condition.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.swift</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.type.module.swift</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>begin</key>
                <string>\b(targetEnvironment)\s*(\()</string>
                <key>end</key>
                <string>(\))|$</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.condition.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.swift</string>
                  </dict>
                </dict>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>support.constant.platform.environment.swift</string>
                    <key>match</key>
                    <string>\b(simulator|UIKitForMac)\b</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>\b(swift|compiler)\s*(\()</string>
                <key>end</key>
                <string>(\))|$</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.condition.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.begin.swift</string>
                  </dict>
                </dict>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.parameters.end.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.comparison.swift</string>
                    <key>match</key>
                    <string>&gt;=|&lt;</string>
                  </dict>
                  <dict>
                    <key>name</key>
                    <string>constant.numeric.swift</string>
                    <key>match</key>
                    <string>\b[0-9]+(?:\.[0-9]+)*\b</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.conditional.swift</string>
            <key>match</key>
            <string>^\s*(#)(else|endif)(.*?)(?=$|//|/\*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.preprocessor.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.preprocessor.conditional.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.character-not-allowed-here.swift</string>
                    <key>match</key>
                    <string>\S+</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.preprocessor.sourcelocation.swift</string>
            <key>match</key>
            <string>^\s*(#)(sourceLocation)((\()([^)]*)(\)))(.*?)(?=$|//|/\*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.preprocessor.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.preprocessor.sourcelocation.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.swift</string>
              </dict>
              <key>5</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>begin</key>
                    <string>(file)\s*(:)\s*(?=")</string>
                    <key>end</key>
                    <string>(?!\G)</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>support.variable.parameter.swift</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.key-value.swift</string>
                      </dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#literals</string>
                      </dict>
                    </array>
                  </dict>
                  <dict>
                    <key>match</key>
                    <string>(line)\s*(:)\s*([0-9]+)</string>
                    <key>captures</key>
                    <dict>
                      <key>1</key>
                      <dict>
                        <key>name</key>
                        <string>support.variable.parameter.swift</string>
                      </dict>
                      <key>2</key>
                      <dict>
                        <key>name</key>
                        <string>punctuation.separator.key-value.swift</string>
                      </dict>
                      <key>3</key>
                      <dict>
                        <key>name</key>
                        <string>constant.numeric.integer.swift</string>
                      </dict>
                    </dict>
                  </dict>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.parameters.swift</string>
                    <key>match</key>
                    <string>,</string>
                  </dict>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.character-not-allowed-here.swift</string>
                    <key>match</key>
                    <string>\S+</string>
                  </dict>
                </array>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.parameters.begin.swift</string>
              </dict>
              <key>7</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.character-not-allowed-here.swift</string>
                    <key>match</key>
                    <string>\S+</string>
                  </dict>
                </array>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>conditionals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;!\.)\b(if|guard|switch|for)\b</string>
            <key>end</key>
            <string>(?=\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#keywords</string>
                  </dict>
                </array>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions-without-trailing-closures</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>while can be the end of a repeat-while statement so doesn't necessarily have braces after it</string>
            <key>begin</key>
            <string>(?&lt;!\.)\b(while)\b</string>
            <key>end</key>
            <string>(?=\{)|$</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#keywords</string>
                  </dict>
                </array>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions-without-trailing-closures</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-function</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-subscript</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-typed-variable-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-import</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-precedencegroup</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-protocol</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-extension</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-typealias</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-macro</string>
          </dict>
        </array>
      </dict>
      <key>declarations-available-types</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attributes</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.swift</string>
            <key>match</key>
            <string>\basync\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.exception.swift</string>
            <key>match</key>
            <string>\b(?:throws|rethrows)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.operator.type.opaque.swift</string>
            <key>match</key>
            <string>\bsome\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.operator.type.existential.swift</string>
            <key>match</key>
            <string>\bany\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.swift</string>
            <key>match</key>
            <string>\b(?:repeat|each)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.swift</string>
            <key>match</key>
            <string>\b(?:inout|isolated|borrowing|consuming)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.language.swift</string>
            <key>match</key>
            <string>\bSelf\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.function.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: A &amp; B</string>
            <key>match</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.composition.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.optional.swift</string>
            <key>match</key>
            <string>[?!]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.function.variadic-parameter.swift</string>
            <key>match</key>
            <string>\.\.\.</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 2: protocol&lt;A, B&gt;</string>
            <key>name</key>
            <string>keyword.other.type.composition.swift</string>
            <key>match</key>
            <string>\bprotocol\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.type.metatype.swift</string>
            <key>match</key>
            <string>(?&lt;=\.)(?:Protocol|Type)\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-available-types-tuple-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-available-types-collection-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-argument-clause</string>
          </dict>
        </array>
      </dict>
      <key>declarations-available-types-collection-type</key>
      <dict>
        <key>comment</key>
        <string>array and dictionary types [Value] and [Key: Value]</string>
        <key>begin</key>
        <string>\[</string>
        <key>end</key>
        <string>\]|(?=[&gt;){}])</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.collection-type.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.collection-type.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>:</string>
            <key>end</key>
            <string>(?=\]|[&gt;){}])</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.key-value.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-colon-in-dictionary-type.swift</string>
                <key>match</key>
                <string>:</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-available-types-tuple-type</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>end</key>
        <string>\)|(?=[&gt;\]{}])</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.tuple-type.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.tuple-type.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
        </array>
      </dict>
      <key>declarations-extension</key>
      <dict>
        <key>name</key>
        <string>meta.definition.type.$1.swift</string>
        <key>begin</key>
        <string>\b(extension)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.$1.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
            </array>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0143: Conditional Conformances</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.type.body.swift</string>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-function</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.swift</string>
        <key>begin</key>
        <string>(?x)
\b
(func)
\s+
(
  (?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
  | (?:
    (
      (?&lt;oph&gt;                # operator-head
        [/=\-+!*%&lt;&gt;&amp;|^~?]
        | [\x{00A1}-\x{00A7}]
        | [\x{00A9}\x{00AB}]
        | [\x{00AC}\x{00AE}]
        | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
        | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
        | [\x{2030}-\x{203E}]
        | [\x{2041}-\x{2053}]
        | [\x{2055}-\x{205E}]
        | [\x{2190}-\x{23FF}]
        | [\x{2500}-\x{2775}]
        | [\x{2794}-\x{2BFF}]
        | [\x{2E00}-\x{2E7F}]
        | [\x{3001}-\x{3003}]
        | [\x{3008}-\x{3030}]
      )
      (
        \g&lt;oph&gt;
        | (?&lt;opc&gt;                # operator-character
          [\x{0300}-\x{036F}]
          | [\x{1DC0}-\x{1DFF}]
          | [\x{20D0}-\x{20FF}]
          | [\x{FE00}-\x{FE0F}]
          | [\x{FE20}-\x{FE2F}]
          | [\x{E0100}-\x{E01EF}]
        )
      )*
    )
    | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )      # Dot operators
  )
)
\s*
(?=\(|&lt;)</string>
        <key>end</key>
        <string>(?&lt;=\})|$(?# functions in protocol declarations or generated interfaces have no body)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-result</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the parameters and return type</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.function.body.swift</string>
            <key>begin</key>
            <string>(\{)</string>
            <key>end</key>
            <string>(\})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-function-initializer</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.initializer.swift</string>
        <key>begin</key>
        <string>(?&lt;!\.)\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\s*(?=\(|&lt;)</string>
        <key>end</key>
        <string>(?&lt;=\})|$</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.character-not-allowed-here.swift</string>
                <key>match</key>
                <string>(?&lt;=[?!])[?!]+</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the parameters and return type</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.function.body.swift</string>
            <key>begin</key>
            <string>(\{)</string>
            <key>end</key>
            <string>(\})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-function-result</key>
      <dict>
        <key>name</key>
        <string>meta.function-result.swift</string>
        <key>begin</key>
        <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(-&gt;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])\s*</string>
        <key>end</key>
        <string>(?!\G)(?=\{|\bwhere\b|;|=)|$</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.function-result.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
        </array>
      </dict>
      <key>declarations-function-subscript</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.subscript.swift</string>
        <key>begin</key>
        <string>(?&lt;!\.)\b(subscript)\s*(?=\(|&lt;)</string>
        <key>end</key>
        <string>(?&lt;=\})|$</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-result</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.function.body.swift</string>
            <key>begin</key>
            <string>(\{)</string>
            <key>end</key>
            <string>(\})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-generic-argument-clause</key>
      <dict>
        <key>name</key>
        <string>meta.generic-argument-clause.swift</string>
        <key>begin</key>
        <string>&lt;</string>
        <key>end</key>
        <string>&gt;|(?=[)\]{}])</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.generic-argument-clause.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.generic-argument-clause.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
        </array>
      </dict>
      <key>declarations-generic-parameter-clause</key>
      <dict>
        <key>name</key>
        <string>meta.generic-parameter-clause.swift</string>
        <key>begin</key>
        <string>&lt;</string>
        <key>end</key>
        <string>&gt;|(?=[^\w\d:&lt;&gt;\s,=&amp;`])(?# characters besides these are never valid in a generic param list -- even if it's not really a valid clause, we should stop trying to parse it if we see one of them.)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.generic-parameter-clause.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.generic-parameter-clause.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 2: constraints inside the generic param list</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.swift</string>
            <key>match</key>
            <string>\beach\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b((?!\d)\w[\w\d]*)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.language.generic-parameter.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.generic-parameters.swift</string>
            <key>match</key>
            <string>,</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.generic-parameter-constraint.swift</string>
            <key>begin</key>
            <string>(:)\s*</string>
            <key>end</key>
            <string>(?=[,&gt;]|(?!\G)\bwhere\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.generic-parameter-constraint.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.other.inherited-class.swift</string>
                <key>begin</key>
                <string>\G</string>
                <key>end</key>
                <string>(?=[,&gt;]|(?!\G)\bwhere\b)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#declarations-type-identifier</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#declarations-type-operators</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-generic-where-clause</key>
      <dict>
        <key>name</key>
        <string>meta.generic-where-clause.swift</string>
        <key>begin</key>
        <string>\b(where)\b\s*</string>
        <key>end</key>
        <string>(?!\G)$|(?=[&gt;{};\n]|//|/\*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.generic-constraint-introducer.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-where-clause-requirement-list</string>
          </dict>
        </array>
      </dict>
      <key>declarations-generic-where-clause-requirement-list</key>
      <dict>
        <key>begin</key>
        <string>\G|,\s*</string>
        <key>end</key>
        <string>(?=[,&gt;{};\n]|//|/\*)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constraint</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.generic-where-clause.same-type-requirement.swift</string>
            <key>begin</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(==)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>end</key>
            <string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.generic-constraint.same-type.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.generic-where-clause.conformance-requirement.swift</string>
            <key>begin</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(:)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>end</key>
            <string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.generic-constraint.conforms-to.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>contentName</key>
                <string>entity.other.inherited-class.swift</string>
                <key>begin</key>
                <string>\G\s*</string>
                <key>end</key>
                <string>(?=\s*[,&gt;{};\n]|//|/\*)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#declarations-available-types</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-import</key>
      <dict>
        <key>name</key>
        <string>meta.import.swift</string>
        <key>begin</key>
        <string>(?&lt;!\.)\b(import)\s+</string>
        <key>end</key>
        <string>(;)|$\n?|(?=//|/\*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.terminator.statement.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G(?!;|$|//|/\*)(?:(typealias|struct|class|actor|enum|protocol|var|func)\s+)?</string>
            <key>end</key>
            <string>(?=;|$|//|/\*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.name.type.swift</string>
                <key>match</key>
                <string>(?x)
(?&lt;=\G|\.)
(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.identifier.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.identifier.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>name</key>
                <string>entity.name.type.swift</string>
                <key>match</key>
                <string>(?x)
(?&lt;=\G|\.)
\$[0-9]+</string>
              </dict>
              <dict>
                <key>name</key>
                <string>entity.name.type.swift</string>
                <key>match</key>
                <string>(?x)
(?&lt;=\G|\.)
(?:
  (
    (?&lt;oph&gt;                # operator-head
      [/=\-+!*%&lt;&gt;&amp;|^~?]
      | [\x{00A1}-\x{00A7}]
      | [\x{00A9}\x{00AB}]
      | [\x{00AC}\x{00AE}]
      | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
      | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
      | [\x{2030}-\x{203E}]
      | [\x{2041}-\x{2053}]
      | [\x{2055}-\x{205E}]
      | [\x{2190}-\x{23FF}]
      | [\x{2500}-\x{2775}]
      | [\x{2794}-\x{2BFF}]
      | [\x{2E00}-\x{2E7F}]
      | [\x{3001}-\x{3003}]
      | [\x{3008}-\x{3030}]
    )
    (
      \g&lt;oph&gt;
      | (?&lt;opc&gt;                # operator-character
        [\x{0300}-\x{036F}]
        | [\x{1DC0}-\x{1DFF}]
        | [\x{20D0}-\x{20FF}]
        | [\x{FE00}-\x{FE0F}]
        | [\x{FE20}-\x{FE2F}]
        | [\x{E0100}-\x{E01EF}]
      )
    )*
  )
  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )      # Dot operators
)
(?=\.|;|$|//|/\*|\s)</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>invalid.illegal.dot-not-allowed-here.swift</string>
                        <key>match</key>
                        <string>\.</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>name</key>
                <string>punctuation.separator.import.swift</string>
                <key>match</key>
                <string>\.</string>
              </dict>
              <dict>
                <key>name</key>
                <string>invalid.illegal.character-not-allowed-here.swift</string>
                <key>begin</key>
                <string>(?!\s*(;|$|//|/\*))</string>
                <key>end</key>
                <string>(?=\s*(;|$|//|/\*))</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-inheritance-clause</key>
      <dict>
        <key>name</key>
        <string>meta.inheritance-clause.swift</string>
        <key>begin</key>
        <string>(:)(?=\s*\{)|(:)\s*</string>
        <key>end</key>
        <string>(?!\G)$|(?=[={}]|(?!\G)\bwhere\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.empty-inheritance-clause.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.inheritance-clause.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\bclass\b</string>
            <key>end</key>
            <string>(?=[={}]|(?!\G)\bwhere\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-inheritance-clause-more-types</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\G</string>
            <key>end</key>
            <string>(?!\G)$|(?=[={}]|(?!\G)\bwhere\b)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-inheritance-clause-inherited-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-inheritance-clause-more-types</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-type-operators</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-inheritance-clause-inherited-type</key>
      <dict>
        <key>name</key>
        <string>entity.other.inherited-class.swift</string>
        <key>begin</key>
        <string>(?=[`\p{L}_])</string>
        <key>end</key>
        <string>(?!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-type-identifier</string>
          </dict>
        </array>
      </dict>
      <key>declarations-inheritance-clause-more-types</key>
      <dict>
        <key>name</key>
        <string>meta.inheritance-list.more-types</string>
        <key>begin</key>
        <string>,\s*</string>
        <key>end</key>
        <string>(?!\G)(?!//|/\*)|(?=[,={}]|(?!\G)\bwhere\b)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause-inherited-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause-more-types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-operators</string>
          </dict>
        </array>
      </dict>
      <key>declarations-macro</key>
      <dict>
        <key>name</key>
        <string>meta.definition.macro.swift</string>
        <key>begin</key>
        <string>(?x)
\b
(macro)
\s+
((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))
\s*
(?=\(|&lt;|=)</string>
        <key>end</key>
        <string>$|(?=;|//|/\*|\}|=)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-result</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the parameters and return type</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
        </array>
      </dict>
      <key>declarations-operator</key>
      <dict>
        <key>name</key>
        <string>meta.definition.operator.swift</string>
        <key>begin</key>
        <string>(?x)
(?:
  \b(prefix|infix|postfix)
  \s+
)?
\b
(operator)
\s+
(
  (
    (?&lt;oph&gt;                  # operator-head
      [/=\-+!*%&lt;&gt;&amp;|^~?]
      | [\x{00A1}-\x{00A7}]
      | [\x{00A9}\x{00AB}]
      | [\x{00AC}\x{00AE}]
      | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
      | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
      | [\x{2030}-\x{203E}]
      | [\x{2041}-\x{2053}]
      | [\x{2055}-\x{205E}]
      | [\x{2190}-\x{23FF}]
      | [\x{2500}-\x{2775}]
      | [\x{2794}-\x{2BFF}]
      | [\x{2E00}-\x{2E7F}]
      | [\x{3001}-\x{3003}]
      | [\x{3008}-\x{3030}]
    )
    (
      \g&lt;oph&gt;
      | \.                  # Invalid dot
      | (?&lt;opc&gt;                # operator-character
        [\x{0300}-\x{036F}]
        | [\x{1DC0}-\x{1DFF}]
        | [\x{20D0}-\x{20FF}]
        | [\x{FE00}-\x{FE0F}]
        | [\x{FE20}-\x{FE2F}]
        | [\x{E0100}-\x{E01EF}]
      )
    )*+
  )
  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )++ )      # Dot operators
)
\s*</string>
        <key>end</key>
        <string>(;)|$\n?|(?=//|/\*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.operator.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.operator.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>comment</key>
            <string>workaround for https://github.com/microsoft/vscode-textmate/issues/140#issuecomment-1793610346</string>
            <key>name</key>
            <string>entity.name.function.operator.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.dot-not-allowed-here.swift</string>
                <key>match</key>
                <string>\.</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.terminator.statement.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-operator-swift2</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-operator-swift3</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.character-not-allowed-here.swift</string>
            <key>match</key>
            <string>((?!$|;|//|/\*)\S)+</string>
          </dict>
        </array>
      </dict>
      <key>declarations-operator-swift2</key>
      <dict>
        <key>begin</key>
        <string>\G(\{)</string>
        <key>end</key>
        <string>(\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.operator.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.operator.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(associativity)\s+(left|right)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.operator.associativity.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(precedence)\s+([0-9]+)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>\b(assignment)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.swift</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>declarations-operator-swift3</key>
      <dict>
        <key>match</key>
        <string>\G(:)\s*((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
        <key>captures</key>
        <dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.other.inherited-class.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-types-precedencegroup</string>
              </dict>
            </array>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
      </dict>
      <key>declarations-parameter-clause</key>
      <dict>
        <key>name</key>
        <string>meta.parameter-clause.swift</string>
        <key>begin</key>
        <string>(\()</string>
        <key>end</key>
        <string>(\))(?:\s*(async)\b)?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-list</string>
          </dict>
        </array>
      </dict>
      <key>declarations-parameter-list</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>External parameter labels are considered part of the function name</string>
            <key>match</key>
            <string>((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q1&gt;))\s+((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q2&gt;))(?=\s*:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.swift</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>If no external label is given, the name is both the external label and the internal variable name</string>
            <key>match</key>
            <string>(((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)))(?=\s*:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>:\s*(?!\s)</string>
            <key>end</key>
            <string>(?=[,)])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-colon-in-parameter-list.swift</string>
                <key>match</key>
                <string>:</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>a parameter's default value</string>
                <key>begin</key>
                <string>=</string>
                <key>end</key>
                <string>(?=[,)])</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expressions</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-precedencegroup</key>
      <dict>
        <key>name</key>
        <string>meta.definition.precedencegroup.swift</string>
        <key>begin</key>
        <string>\b(precedencegroup)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(?=\{)</string>
        <key>end</key>
        <string>(?!\G)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.precedencegroup.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.precedencegroup.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.precedencegroup.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.precedencegroup.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(higherThan|lowerThan)\s*:\s*((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>entity.other.inherited-class.swift</string>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#declarations-types-precedencegroup</string>
                      </dict>
                    </array>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.identifier.swift</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.identifier.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(associativity)\b(?:\s*:\s*(right|left|none)\b)?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.operator.associativity.swift</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\b(assignment)\b(?:\s*:\s*(true|false)\b)?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>constant.language.boolean.swift</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-protocol</key>
      <dict>
        <key>name</key>
        <string>meta.definition.type.protocol.swift</string>
        <key>begin</key>
        <string>\b(protocol)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.$1.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.$1.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0142: Permit where clauses to constrain associated types</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.type.body.swift</string>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-protocol-protocol-method</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-protocol-protocol-initializer</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-protocol-associated-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-protocol-associated-type</key>
      <dict>
        <key>name</key>
        <string>meta.definition.associatedtype.swift</string>
        <key>begin</key>
        <string>\b(associatedtype)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
        <key>end</key>
        <string>(?!\G)$|(?=[;}]|$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.declaration-specifier.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.language.associatedtype.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0142: Permit where clauses to constrain associated types</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-typealias-assignment</string>
          </dict>
        </array>
      </dict>
      <key>declarations-protocol-protocol-initializer</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.initializer.swift</string>
        <key>begin</key>
        <string>(?&lt;!\.)\b(init[?!]*(?# only one is valid, but we want the in⇥ snippet to produce something that looks good))\s*(?=\(|&lt;)</string>
        <key>end</key>
        <string>$|(?=;|//|/\*|\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.character-not-allowed-here.swift</string>
                <key>match</key>
                <string>(?&lt;=[?!])[?!]+</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the parameters and return type</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.function-body-not-allowed-in-protocol.swift</string>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-protocol-protocol-method</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.swift</string>
        <key>begin</key>
        <string>(?x)
\b
(func)
\s+
(
  (?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
    | (?:
      (
        (?&lt;oph&gt;                # operator-head
          [/=\-+!*%&lt;&gt;&amp;|^~?]
          | [\x{00A1}-\x{00A7}]
          | [\x{00A9}\x{00AB}]
          | [\x{00AC}\x{00AE}]
          | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
          | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
          | [\x{2030}-\x{203E}]
          | [\x{2041}-\x{2053}]
          | [\x{2055}-\x{205E}]
          | [\x{2190}-\x{23FF}]
          | [\x{2500}-\x{2775}]
          | [\x{2794}-\x{2BFF}]
          | [\x{2E00}-\x{2E7F}]
          | [\x{3001}-\x{3003}]
          | [\x{3008}-\x{3030}]
        )
        (
          \g&lt;oph&gt;
          | (?&lt;opc&gt;                # operator-character
            [\x{0300}-\x{036F}]
            | [\x{1DC0}-\x{1DFF}]
            | [\x{20D0}-\x{20FF}]
            | [\x{FE00}-\x{FE0F}]
            | [\x{FE20}-\x{FE2F}]
            | [\x{E0100}-\x{E01EF}]
          )
        )*
      )
      | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )      # Dot operators
    )
  )
\s*
(?=\(|&lt;)</string>
        <key>end</key>
        <string>$|(?=;|//|/\*|\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-parameter-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-function-result</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-throws</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the parameters and return type</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.function-body-not-allowed-in-protocol.swift</string>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.function.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.definition.type.$1.swift</string>
            <key>begin</key>
            <string>\b(class(?!\s+(?:func|var|let)\b)|struct|actor)\b\s*((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.$1.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.$1.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-generic-parameter-clause</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Swift 3: generic constraints after the generic param list</string>
                <key>include</key>
                <string>#declarations-generic-where-clause</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#declarations-inheritance-clause</string>
              </dict>
              <dict>
                <key>name</key>
                <string>meta.definition.type.body.swift</string>
                <key>begin</key>
                <string>\{</string>
                <key>end</key>
                <string>\}</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.type.begin.swift</string>
                  </dict>
                </dict>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.type.end.swift</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>$self</string>
                  </dict>
                </array>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum</string>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum</key>
      <dict>
        <key>name</key>
        <string>meta.definition.type.$1.swift</string>
        <key>begin</key>
        <string>\b(enum)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.$1.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.$1.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-generic-parameter-clause</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>Swift 3: generic constraints after the generic param list</string>
            <key>include</key>
            <string>#declarations-generic-where-clause</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-inheritance-clause</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.type.body.swift</string>
            <key>begin</key>
            <string>\{</string>
            <key>end</key>
            <string>\}</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.type.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-type-enum-enum-case-clause</string>
              </dict>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum-associated-values</key>
      <dict>
        <key>begin</key>
        <string>\G\(</string>
        <key>end</key>
        <string>\)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
(?:(_)|((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q1&gt;))
\s+
(((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q2&gt;))
\s*(:)</string>
            <key>end</key>
            <string>(?=[,)\]])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.distinct-labels-not-allowed.swift</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.swift</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*\k&lt;q&gt;))\s*(:)</string>
            <key>end</key>
            <string>(?=[,)\]])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.function.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>an element without a label (i.e. anything else)</string>
            <key>begin</key>
            <string>(?![,)\]])(?=\S)</string>
            <key>end</key>
            <string>(?=[,)\]])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-available-types</string>
              </dict>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-colon-in-parameter-list.swift</string>
                <key>match</key>
                <string>:</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum-enum-case</key>
      <dict>
        <key>begin</key>
        <string>(?x)((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
        <key>end</key>
        <string>(?&lt;=\))|(?![=(])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.other.enummember.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-associated-values</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-raw-value-assignment</string>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum-enum-case-clause</key>
      <dict>
        <key>begin</key>
        <string>\b(case)\b\s*</string>
        <key>end</key>
        <string>(?=[;}])|(?!\G)(?!//|/\*)(?=[^\s,])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.enum.case.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-enum-case</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-more-cases</string>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum-more-cases</key>
      <dict>
        <key>name</key>
        <string>meta.enum-case.more-cases</string>
        <key>begin</key>
        <string>,\s*</string>
        <key>end</key>
        <string>(?!\G)(?!//|/\*)(?=[;}]|[^\s,])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-enum-case</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-type-enum-more-cases</string>
          </dict>
        </array>
      </dict>
      <key>declarations-type-enum-raw-value-assignment</key>
      <dict>
        <key>begin</key>
        <string>(=)\s*</string>
        <key>end</key>
        <string>(?!\G)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals</string>
          </dict>
        </array>
      </dict>
      <key>declarations-type-identifier</key>
      <dict>
        <key>begin</key>
        <string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
        <key>end</key>
        <string>(?!&lt;)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.type-name.swift</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#builtin-types</string>
              </dict>
            </array>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?=&lt;)</string>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-generic-argument-clause</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>declarations-type-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Swift 3: A &amp; B</string>
            <key>match</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(&amp;)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.composition.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0390: Noncopyable structs and enums</string>
            <key>match</key>
            <string>(?&lt;![/=\-+!*%&lt;&gt;&amp;|\^~.])(~)(?![/=\-+!*%&lt;&gt;&amp;|\^~.])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.requirement-suppression.swift</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>declarations-typealias</key>
      <dict>
        <key>name</key>
        <string>meta.definition.typealias.swift</string>
        <key>begin</key>
        <string>\b(typealias)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*</string>
        <key>end</key>
        <string>(?!\G)$|(?=;|//|/\*|$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other.declaration-specifier.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.typealias.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.identifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>\G(?=&lt;)</string>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#declarations-generic-parameter-clause</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations-typealias-assignment</string>
          </dict>
        </array>
      </dict>
      <key>declarations-typealias-assignment</key>
      <dict>
        <key>begin</key>
        <string>(=)\s*</string>
        <key>end</key>
        <string>(?!\G)$|(?=;|//|/\*|$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
        </array>
      </dict>
      <key>declarations-typed-variable-declaration</key>
      <dict>
        <key>begin</key>
        <string>(?x)
\b(?:(async)\s+)?(let|var)\b\s+
(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)\s*
:</string>
        <key>end</key>
        <string>(?=$|[={])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.other.declaration-specifier.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declarations-available-types</string>
          </dict>
        </array>
      </dict>
      <key>declarations-types-precedencegroup</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Precedence groups in the standard library</string>
            <key>name</key>
            <string>support.type.swift</string>
            <key>match</key>
            <string>\b(?:BitwiseShift|Assignment|RangeFormation|Casting|Addition|NilCoalescing|Comparison|LogicalConjunction|LogicalDisjunction|Default|Ternary|Multiplication|FunctionArrow)Precedence\b</string>
          </dict>
        </array>
      </dict>
      <key>expressions</key>
      <dict>
        <key>comment</key>
        <string>trailing closures need to be parsed before other member references</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-trailing-closure</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member-reference</string>
          </dict>
        </array>
      </dict>
      <key>expressions-trailing-closure</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>foo { body } -- a call with a trailing closure and no argument clause</string>
            <key>name</key>
            <string>meta.function-call.trailing-closure-only.swift</string>
            <key>match</key>
            <string>(#?(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))(?=\s*\{)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.any-method.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>foo: { body } -- labeled-trailing-closure (SE-0279)</string>
            <key>match</key>
            <string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(:)(?=\s*\{)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.any-method.trailing-closure-label.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.swift</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#member-references</string>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#code-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#attributes</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-closure-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-global-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#builtin-properties</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-compound-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#conditionals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#keywords</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-availability-condition</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-macro-expansion</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-subscript-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-parenthesized-expression</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.variable.discard-value.swift</string>
            <key>match</key>
            <string>\b_\b</string>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-availability-condition</key>
      <dict>
        <key>begin</key>
        <string>\B(#(?:un)?available)(\()</string>
        <key>end</key>
        <string>\)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>support.function.availability-condition.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\s*\b((?:iOS|macOS|OSX|watchOS|tvOS|visionOS|UIKitForMac)(?:ApplicationExtension)?)\b(?:\s+([0-9]+(?:\.[0-9]+)*\b))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.platform.os.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\*)\s*(.*?)(?=[,)])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.platform.all.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.character-not-allowed-here.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.character-not-allowed-here.swift</string>
            <key>match</key>
            <string>[^\s,)]+</string>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-closure-parameter</key>
      <dict>
        <key>name</key>
        <string>variable.language.closure-parameter.swift</string>
        <key>match</key>
        <string>\$[0-9]+</string>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-compound-name</key>
      <dict>
        <key>comment</key>
        <string>a reference to a function with disambiguating argument labels, such as foo(_:), foo(bar:), etc.</string>
        <key>match</key>
        <string>(?x)
((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q1&gt;))           # function name
\(
  (
    (
      ((?&lt;q2&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q2&gt;))   # argument label
      :                        # colon
    )+
  )
\)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.compound-name.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.entity.swift</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.entity.swift</string>
          </dict>
          <key>4</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.name.function.compound-name.swift</string>
                <key>match</key>
                <string>(?&lt;q&gt;`?)(?!_:)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;):</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.entity.swift</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.entity.swift</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </dict>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-expression-element-list</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comments</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>an element with a label</string>
            <key>begin</key>
            <string>((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(:)</string>
            <key>end</key>
            <string>(?=[,)\]])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.any-method.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>an element without a label (i.e. anything else)</string>
            <key>begin</key>
            <string>(?![,)\]])(?=\S)</string>
            <key>end</key>
            <string>(?=[,)\]])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-function-or-macro-call-expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>foo(args) -- a call whose callee is a highlightable name</string>
            <key>name</key>
            <string>meta.function-call.swift</string>
            <key>begin</key>
            <string>(#?(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))\s*(\()</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.any-method.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions-without-trailing-closures-or-member-references-expression-element-list</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>[Int](args) -- a call whose callee is a more complicated expression</string>
            <key>name</key>
            <string>meta.function-call.swift</string>
            <key>begin</key>
            <string>(?&lt;=[`\])}&gt;\p{L}_\p{N}\p{M}])\s*(\()</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions-without-trailing-closures-or-member-references-expression-element-list</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-macro-expansion</key>
      <dict>
        <key>name</key>
        <string>support.function.any-method.swift</string>
        <key>match</key>
        <string>(#(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-parenthesized-expression</key>
      <dict>
        <key>comment</key>
        <string>correctly matching closure expressions is too hard (depends on trailing "in") so we just tack on some basics to the end of parenthesized-expression</string>
        <key>begin</key>
        <string>\(</string>
        <key>end</key>
        <string>(\))\s*((?:\b(?:async|throws|rethrows)\s)*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.tuple.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.tuple.end.swift</string>
          </dict>
          <key>2</key>
          <dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.rethrows-only-allowed-on-function-declarations.swift</string>
                <key>match</key>
                <string>\brethrows\b</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#async-throws</string>
              </dict>
            </array>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-expression-element-list</string>
          </dict>
        </array>
      </dict>
      <key>expressions-without-trailing-closures-or-member-references-subscript-expression</key>
      <dict>
        <key>name</key>
        <string>meta.subscript-expression.swift</string>
        <key>begin</key>
        <string>(?&lt;=[`\p{L}_\p{N}\p{M}])\s*(\[)</string>
        <key>end</key>
        <string>\]</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.begin.swift</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.arguments.end.swift</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressions-without-trailing-closures-or-member-references-expression-element-list</string>
          </dict>
        </array>
      </dict>
      <key>keywords</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.branch.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:if|else|guard|where|switch|case|default|fallthrough)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.transfer.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:continue|break|fallthrough|return)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:while|for|in|each)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.operator.type.existential.swift</string>
            <key>match</key>
            <string>\bany\b(?=\s*`?[\p{L}_])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>extra scopes for repeat-while snippet</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(repeat)\b(\s*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.trailing.repeat.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.defer.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\bdefer\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:(await\s+try)|(await))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.try-must-precede-await.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.await.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.exception.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:catch|throw|try)\b|\btry[?!]\B</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.exception.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:throws|rethrows)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>extra scopes for do-catch snippet</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(do)\b(\s*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.exception.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.trailing.do.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:(async)\s+)?(let|var)\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.declaration-specifier.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.declaration-specifier.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:associatedtype|operator|typealias)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.$1.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(class|enum|extension|precedencegroup|protocol|struct|actor)\b(?=\s*`?[\p{L}_])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix|distributed|nonisolated|borrowing|consuming)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.function.swift</string>
            <key>match</key>
            <string>\binit[?!]|\binit\b|(?&lt;!\.)\b(?:func|deinit|subscript|didSet|get|set|willSet)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.declaration-specifier.accessibility.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:fileprivate|private|internal|public|open|package)\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>matches weak, unowned, unowned(safe), unowned(unsafe)</string>
            <key>name</key>
            <string>keyword.other.capture-specifier.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\bunowned\((?:safe|unsafe)\)|(?&lt;!\.)\b(?:weak|unowned)\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)(?:(dynamicType|self)|(Protocol|Type))\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.type.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.type.metatype.swift</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.language.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\b(?:super|self|Self)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.variable.swift</string>
            <key>match</key>
            <string>\B(?:#file|#filePath|#fileID|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.import.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\bimport\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0366: "consume behaves as a contextual keyword. In order to avoid interfering with existing code that calls functions named consume, the operand to consume must begin with another identifier, and must consist of an identifier or postfix expression"</string>
            <key>name</key>
            <string>keyword.control.consume.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\bconsume(?=\s+`?[\p{L}_])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0377: "copy is a contextual keyword, parsed as an operator if it is immediately followed by an identifier on the same line, like the consume x operator before it"</string>
            <key>name</key>
            <string>keyword.control.copy.swift</string>
            <key>match</key>
            <string>(?&lt;!\.)\bcopy(?=\s+`?[\p{L}_])</string>
          </dict>
        </array>
      </dict>
      <key>literals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#literals-boolean</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-numeric</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-string</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.nil.swift</string>
            <key>match</key>
            <string>\bnil\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>object "literals" used in playgrounds</string>
            <key>name</key>
            <string>support.function.object-literal.swift</string>
            <key>match</key>
            <string>\B#(colorLiteral|imageLiteral|fileLiteral)\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.function.builtin-macro.swift</string>
            <key>match</key>
            <string>\B#externalMacro\b</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.function.key-path.swift</string>
            <key>match</key>
            <string>\B#keyPath\b</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\B(#selector)(\()(?:\s*(getter|setter)\s*(:))?</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.function.selector-reference.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.begin.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.variable.parameter.swift</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.argument-label.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.arguments.end.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expressions</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal</string>
          </dict>
        </array>
      </dict>
      <key>literals-boolean</key>
      <dict>
        <key>name</key>
        <string>constant.language.boolean.swift</string>
        <key>match</key>
        <string>\b(true|false)\b</string>
      </dict>
      <key>literals-numeric</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>0.1, -4_2.5, 6.022e23, 10E-5</string>
            <key>name</key>
            <string>constant.numeric.float.decimal.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*(?=\.[0-9]|[eE])(?:\.[0-9][0-9_]*)?(?:[eE][-+]?[0-9][0-9_]*)?\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>-0x1.ap2_3, 0x31p-4</string>
            <key>name</key>
            <string>constant.numeric.float.hexadecimal.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?[pP][-+]?[0-9][0-9_]*\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0x1p, 0x1p_2, 0x1.5pa, 0x1.1p+1f, 0x1pz</string>
            <key>name</key>
            <string>invalid.illegal.numeric.float.invalid-exponent.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)(?:\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:[pP][-+]?\w*)\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0x1.5w (note that 0x1.f may be a valid expression)</string>
            <key>name</key>
            <string>invalid.illegal.numeric.float.missing-exponent.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)(0x[0-9a-fA-F][0-9a-fA-F_]*)\.[0-9][\w.]*</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>-.5, .2f (note that 1.-.5 may be a valid expression)</string>
            <key>name</key>
            <string>invalid.illegal.numeric.float.missing-leading-zero.swift</string>
            <key>match</key>
            <string>(?&lt;=\s|^)\-?\.[0-9][\w.]*</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0b_0_1, 0x_1p+3q</string>
            <key>name</key>
            <string>invalid.illegal.numeric.leading-underscore.swift</string>
            <key>match</key>
            <string>(\B\-|\b)0[box]_[0-9a-fA-F_]*(?:[pPeE][+-]?\w+)?[\w.]+</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>tuple positional member: not really a numeric literal, but not invalid</string>
            <key>match</key>
            <string>(?&lt;=[\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9]+\b</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0b010, 0b1_0</string>
            <key>name</key>
            <string>constant.numeric.integer.binary.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0b[01][01_]*\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0o1, 0o7_3</string>
            <key>name</key>
            <string>constant.numeric.integer.octal.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0o[0-7][0-7_]*\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>02, 3_456</string>
            <key>name</key>
            <string>constant.numeric.integer.decimal.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)[0-9][0-9_]*\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>0x4, 0xF_7</string>
            <key>name</key>
            <string>constant.numeric.integer.hexadecimal.swift</string>
            <key>match</key>
            <string>(\B\-|\b)(?&lt;![\[\](){}\p{L}_\p{N}\p{M}]\.)0x[0-9a-fA-F][0-9a-fA-F_]*\b(?!\.[0-9])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.numeric.other.swift</string>
            <key>match</key>
            <string>(\B\-|\b)[0-9][\w.]*</string>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal</key>
      <dict>
        <key>comment</key>
        <string>SE-0354 &amp; SE-0355</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.regexp.block.swift</string>
            <key>begin</key>
            <string>(#+)/\n</string>
            <key>end</key>
            <string>/\1</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-regex-guts</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-line-comment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>Single-line regular expression literals must be matched all in one go
 in order to avoid ambiguities with operators, and to adhere to certain
 parsing rules in SE-0354/SE-0355, such as:
 - A regex literal will not be parsed if it contains an unbalanced ).
 - A regex may end with a space only if it began with an escaped space</string>
            <key>name</key>
            <string>string.regexp.line.swift</string>
            <key>match</key>
            <string>(?x)
(?!/\s)         # non-extended regex literals may not start with a space or tab
(?!//)          # disambiguation with line comments (redundant since comment rules occur earlier)
(((\#+)?)/)     # (1) for captures, (2) for matching end, (3) for conditionals
(\\\s)? # (4) may start with an escaped space or tab
(?&lt;guts&gt;
  (?&gt;   # no backtracking, avoids issues with negative lookbehind at end
    (?:
      \\Q
        (?:(?!\\E)(?!/\2).)*+
        (?:\\E
          # A quoted sequence may not have a closing E, in which case it extends to the end of the regex
          | (?(3)|(?&lt;!\s))(?=/\2)
        )
      | \\.
      | \(\?\#[^)]*\)
      | \(\?
          # we only support a fixed maximum number of braces because otherwise we can't balance the number of open and close braces
          \{(?&lt;g1&gt;\{)?+(?&lt;g2&gt;\{)?+(?&lt;g3&gt;\{)?+(?&lt;g4&gt;\{)?+(?&lt;g5&gt;\{)?+
          .+?
          \}(?(&lt;g1&gt;)\})(?(&lt;g2&gt;)\})(?(&lt;g3&gt;)\})(?(&lt;g4&gt;)\})(?(&lt;g5&gt;)\})
          (?:\[(?!\d)\w+\])?
          [X&lt;&gt;]?
        \)
      | (?&lt;class&gt;\[ (?:\\. | [^\[\]] | \g&lt;class&gt;)+ \])
      | \(\g&lt;guts&gt;?+\)
      | (?:(?!/\2)[^()\[\\])+  # any character (until end)
    )+
  )
)?+
# may end with a space only if it is an extended literal or contains only a single escaped space
(?(3)|(?(5)(?&lt;!\s)))
(/\2)     # (12)
| \#+/.+(\n)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#literals-regular-expression-literal-regex-guts</string>
                  </dict>
                </array>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.regexp.swift</string>
              </dict>
              <key>12</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.regexp.swift</string>
              </dict>
              <key>13</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.returns-not-allowed.regexp</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-backreference-or-subpattern</key>
      <dict>
        <key>comment</key>
        <string>These patterns are separated to work around issues like https://github.com/microsoft/vscode-textmate/issues/164</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>'\g{' NamedOrNumberRef '}'</string>
            <key>match</key>
            <string>(?x)(\\g\{) (?: ((?!\d)\w+) (?:([+-])(\d+))? | ([+-]?\d+) (?:([+-])(\d+))? ) (\})</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>'\g' NumberRef</string>
            <key>match</key>
            <string>(?x)(\\g) ([+-]?\d+) (?:([+-])(\d+))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>'\k&lt;' NamedOrNumberRef '&gt;'
 '\g&lt;' NamedOrNumberRef '&gt;'</string>
            <key>match</key>
            <string>(?x)(\\[gk]&lt;) (?: ((?!\d)\w+) (?:([+-])(\d+))? | ([+-]?\d+) (?:([+-])(\d+))? ) (&gt;)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>"\k'" NamedOrNumberRef "'"
 "\g'" NamedOrNumberRef "'"</string>
            <key>match</key>
            <string>(?x)(\\[gk]') (?: ((?!\d)\w+) (?:([+-])(\d+))? | ([+-]?\d+) (?:([+-])(\d+))? ) (')</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>comment</key>
            <string>'\k{' NamedRef '}'</string>
            <key>match</key>
            <string>(?x)(\\k\{) ((?!\d)\w+) (?:([+-])(\d+))? (\})</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape.backslash.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.back-reference.regexp</string>
            <key>match</key>
            <string>\\[1-9][0-9]+</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>'(?P=' NamedRef ')'</string>
            <key>match</key>
            <string>(?x)(\(\?(?:P[=&gt;]|&amp;)) ((?!\d)\w+) (?:([+-])(\d+))? (\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.back-reference.regexp</string>
            <key>match</key>
            <string>\(\?R\)</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>'(?' NumberRef ')'</string>
            <key>match</key>
            <string>(?x)(\(\?) ([+-]?\d+) (?:([+-])(\d+))? (\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-backtracking-directive-or-global-matching-option</key>
      <dict>
        <key>match</key>
        <string>(?x)
(\(\*)
(?:
  (ACCEPT|FAIL|F|MARK(?=:)|(?=:)|COMMIT|PRUNE|SKIP|THEN)
    (?:(:)([^)]+))?
  | (?:(LIMIT_(?:DEPTH|HEAP|MATCH))(=)(\d+))
  | (
      CRLF | CR | ANYCRLF | ANY | LF | NUL
      | BSR_ANYCRLF | BSR_UNICODE
      | NOTEMPTY_ATSTART | NOTEMPTY
      | NO_AUTO_POSSESS | NO_DOTSTAR_ANCHOR
      | NO_JIT | NO_START_OPT | UTF | UCP
    )
)
(\))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>variable.language.tag.regexp</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.regexp</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>constant.numeric.integer.decimal.regexp</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
          <key>9</key>
          <dict>
            <key>name</key>
            <string>keyword.control.directive.regexp</string>
          </dict>
        </dict>
      </dict>
      <key>literals-regular-expression-literal-callout</key>
      <dict>
        <key>name</key>
        <string>meta.callout.regexp</string>
        <key>match</key>
        <string>(?x)
# PCRECallout
(\()(?&lt;keyw&gt;\?C)
  (?:
    (?&lt;num&gt;\d+)
    | `(?&lt;name&gt;(?:[^`]|``)*)`
    | '(?&lt;name&gt;(?:[^']|'')*)'
    | "(?&lt;name&gt;(?:[^"]|"")*)"
    | \^(?&lt;name&gt;(?:[^\^]|\^\^)*)\^
    | %(?&lt;name&gt;(?:[^%]|%%)*)%
    | \#(?&lt;name&gt;(?:[^#]|\#\#)*)\#
    | \$(?&lt;name&gt;(?:[^$]|\$\$)*)\$
    | \{(?&lt;name&gt;(?:[^}]|\}\})*)\}
  )?
(\))
# NamedCallout
| (\()(?&lt;keyw&gt;\*)
    (?&lt;name&gt;(?!\d)\w+)
    (?:\[(?&lt;tag&gt;(?!\d)\w+)\])?
    (?:\{ [^,}]+ (?:,[^,}]+)* \})?
  (\))
# InterpolatedCallout
| (\()(?&lt;keyw&gt;\?)
    # we only support a fixed maximum number of braces because otherwise we can't balance the number of open and close braces
    (\{(?&lt;g1&gt;\{)?+(?&lt;g2&gt;\{)?+(?&lt;g3&gt;\{)?+(?&lt;g4&gt;\{)?+(?&lt;g5&gt;\{)?+) .+? \}(?(&lt;g1&gt;)\})(?(&lt;g2&gt;)\})(?(&lt;g3&gt;)\})(?(&lt;g4&gt;)\})(?(&lt;g5&gt;)\})
    (?:\[(?&lt;tag&gt;(?!\d)\w+)\])?
    (?&lt;keyw&gt;[X&lt;&gt;]?)
  (\))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.control.callout.regexp</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>constant.numeric.integer.decimal.regexp</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>9</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>10</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>11</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>12</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
          <key>13</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
          <key>14</key>
          <dict>
            <key>name</key>
            <string>keyword.control.callout.regexp</string>
          </dict>
          <key>15</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.callout.regexp</string>
          </dict>
          <key>16</key>
          <dict>
            <key>name</key>
            <string>variable.language.tag-name.regexp</string>
          </dict>
          <key>17</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
          <key>18</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
          <key>19</key>
          <dict>
            <key>name</key>
            <string>keyword.control.callout.regexp</string>
          </dict>
          <key>26</key>
          <dict>
            <key>name</key>
            <string>variable.language.tag-name.regexp</string>
          </dict>
          <key>27</key>
          <dict>
            <key>name</key>
            <string>keyword.control.callout.regexp</string>
          </dict>
          <key>28</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.group.regexp</string>
          </dict>
        </dict>
      </dict>
      <key>literals-regular-expression-literal-character-properties</key>
      <dict>
        <key>name</key>
        <string>constant.other.character-class.set.regexp</string>
        <key>match</key>
        <string>(?x)
\\[pP]\{ ([\s\w-]+(?:=[\s\w-]+)?) \}
| (\[:) ([\s\w-]+(?:=[\s\w-]+)?) (:\])</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>support.variable.character-property.regexp</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.character-class.regexp</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>support.variable.character-property.regexp</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.character-class.regexp</string>
          </dict>
        </dict>
      </dict>
      <key>literals-regular-expression-literal-custom-char-class</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.other.character-class.set.regexp</string>
            <key>begin</key>
            <string>(\[)(\^)?</string>
            <key>end</key>
            <string>\]</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.negation.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-custom-char-class-members</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-custom-char-class-members</key>
      <dict>
        <key>comment</key>
        <string>TODO: should also include atoms?</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>\b inside a character class represents a backspace</string>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
            <key>match</key>
            <string>\\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-custom-char-class</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-quote</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-set-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-unicode-scalars</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-character-properties</string>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-group-option-toggle</key>
      <dict>
        <key>comment</key>
        <string>A matching option sequence may be part of an "isolated group" which has an implicit scope that wraps the remaining elements of the current group</string>
        <key>name</key>
        <string>keyword.other.option-toggle.regexp</string>
        <key>match</key>
        <string>(?x)
\(\?
(?:
  \^(?:[iJmnsUxwDPSW]|xx|y\{[gw]\})*
  | (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})+
  | (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})* - (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})*
)
\)</string>
      </dict>
      <key>literals-regular-expression-literal-group-or-conditional</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.group.absent.regexp</string>
            <key>begin</key>
            <string>(\()(\?~)</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.absent.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-regex-guts</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.conditional.regexp</string>
            <key>begin</key>
            <string>(?x)
# KnownConditionalStart
(\() (?&lt;cond&gt;\?\()
  (?:
    (?&lt;NumberRef&gt; (?&lt;num&gt;[+-]?\d+)(?:(?&lt;op&gt;[+-])(?&lt;num&gt;\d+))? )
    | (?&lt;cond&gt;R) \g&lt;NumberRef&gt;?
    | (?&lt;cond&gt;R&amp;) (?&lt;NamedRef&gt; (?&lt;name&gt;(?!\d)\w+) (?:(?&lt;op&gt;[+-])(?&lt;num&gt;\d+))? )
    | (?&lt;cond&gt;&lt;) (?:\g&lt;NamedRef&gt;|\g&lt;NumberRef&gt;) (?&lt;cond&gt;&gt;)
    | (?&lt;cond&gt;') (?:\g&lt;NamedRef&gt;|\g&lt;NumberRef&gt;) (?&lt;cond&gt;')
    | (?&lt;cond&gt;DEFINE)
    | (?&lt;cond&gt;VERSION)(?&lt;compar&gt;&gt;?=)(?&lt;num&gt;\d+\.\d+)
  )
(?&lt;cond&gt;\))
| (\()(?&lt;cond&gt;\?)(?=\()</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>10</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>11</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.recursion-level.regexp</string>
              </dict>
              <key>12</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>13</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>14</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>15</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>16</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>17</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>18</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>19</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.comparison.regexp</string>
              </dict>
              <key>20</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.integer.decimal.regexp</string>
              </dict>
              <key>21</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
              <key>22</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>23</key>
              <dict>
                <key>name</key>
                <string>keyword.control.conditional.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-regex-guts</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.regexp</string>
            <key>begin</key>
            <string>(?x)
(\()
(
  # BasicGroupKind
  (\?)
  (?:
    ([:|&gt;=!*] | &lt;[=!*])
    # named groups
    | P?&lt; (?:((?!\d)\w+) (-))? ((?!\d)\w+) &gt;
    | ' (?:((?!\d)\w+) (-))? ((?!\d)\w+) '
    # matching options
    | (?:
      \^(?:[iJmnsUxwDPSW]|xx|y\{[gw]\})*
      | (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})+
      | (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})* - (?:[iJmnsUxwDPSW]|xx|y\{[gw]\})*
    ):  # case without : is handled by group-option-toggle
  )
  # PCRE2GroupKind
  | \*(
    atomic
    |pla|positive_lookahead
    |nla|negative_lookahead
    |plb|positive_lookbehind
    |nlb|negative_lookbehind
    |napla|non_atomic_positive_lookahead
    |naplb|non_atomic_positive_lookbehind
    |sr|script_run
    |asr|atomic_script_run
  ):
)?+</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.group-options.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.balancing-group.regexp</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
              <key>9</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.balancing-group.regexp</string>
              </dict>
              <key>10</key>
              <dict>
                <key>name</key>
                <string>variable.other.group-name.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#literals-regular-expression-literal-regex-guts</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-line-comment</key>
      <dict>
        <key>name</key>
        <string>comment.line.regexp</string>
        <key>match</key>
        <string>(\#).*$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.regexp</string>
          </dict>
        </dict>
      </dict>
      <key>literals-regular-expression-literal-quote</key>
      <dict>
        <key>name</key>
        <string>string.quoted.other.regexp.swift</string>
        <key>begin</key>
        <string>\\Q</string>
        <key>end</key>
        <string>\\E|(\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
          </dict>
        </dict>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.returns-not-allowed.regexp</string>
          </dict>
        </dict>
      </dict>
      <key>literals-regular-expression-literal-regex-guts</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-quote</string>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.regexp</string>
            <key>begin</key>
            <string>\(\?\#</string>
            <key>end</key>
            <string>\)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.begin.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.end.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.embedded.expression.regexp</string>
            <key>begin</key>
            <string>&lt;\{</string>
            <key>end</key>
            <string>\}&gt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.begin.regexp</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.end.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-unicode-scalars</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-character-properties</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.anchor.regexp</string>
            <key>match</key>
            <string>[$^]|\\[AbBGyYzZ]|\\K</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-backtracking-directive-or-global-matching-option</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-callout</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-backreference-or-subpattern</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.character-class.regexp</string>
            <key>match</key>
            <string>\.|\\[CdDhHNORsSvVwWX]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.entity.control-character.regexp</string>
            <key>match</key>
            <string>\\c.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
            <key>match</key>
            <string>\\[^c]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.or.regexp</string>
            <key>match</key>
            <string>\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.quantifier.regexp</string>
            <key>match</key>
            <string>[*+?]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.quantifier.regexp</string>
            <key>match</key>
            <string>\{\s*\d+\s*(?:,\s*\d*\s*)?\}|\{\s*,\s*\d+\s*\}</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-custom-char-class</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-group-option-toggle</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literals-regular-expression-literal-group-or-conditional</string>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-set-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.intersection.regexp.swift</string>
            <key>match</key>
            <string>&amp;&amp;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.subtraction.regexp.swift</string>
            <key>match</key>
            <string>--</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.symmetric-difference.regexp.swift</string>
            <key>match</key>
            <string>\~\~</string>
          </dict>
        </array>
      </dict>
      <key>literals-regular-expression-literal-unicode-scalars</key>
      <dict>
        <key>name</key>
        <string>constant.character.numeric.regexp</string>
        <key>match</key>
        <string>(?x)
\\u\{\s*(?:[0-9a-fA-F]+\s*)+\}
| \\u[0-9a-fA-F]{4}
| \\x\{[0-9a-fA-F]+\}
| \\x[0-9a-fA-F]{0,2}
| \\U[0-9a-fA-F]{8}
| \\o\{[0-7]+\}
| \\0[0-7]{0,3}
| \\N\{(?:U\+[0-9a-fA-F]{1,8} | [\s\w-]+)\}</string>
      </dict>
      <key>literals-string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>SE-0168: Multi-Line String Literals</string>
            <key>name</key>
            <string>string.quoted.double.block.swift</string>
            <key>begin</key>
            <string>"""</string>
            <key>end</key>
            <string>"""(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.content-after-opening-delimiter.swift</string>
                <key>match</key>
                <string>\G.+(?=""")|\G.+</string>
              </dict>
              <dict>
                <key>name</key>
                <string>constant.character.escape.newline.swift</string>
                <key>match</key>
                <string>\\\s*\n</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literals-string-string-guts</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Allow \("""...""") to appear inside a block string</string>
                <key>name</key>
                <string>invalid.illegal.content-before-closing-delimiter.swift</string>
                <key>match</key>
                <string>\S((?!\\\().)*(?=""")</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.double.block.raw.swift</string>
            <key>begin</key>
            <string>#"""</string>
            <key>end</key>
            <string>"""#(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.content-after-opening-delimiter.swift</string>
                <key>match</key>
                <string>\G.+(?=""")|\G.+</string>
              </dict>
              <dict>
                <key>name</key>
                <string>constant.character.escape.newline.swift</string>
                <key>match</key>
                <string>\\#\s*\n</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literals-string-raw-string-guts</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Allow \("""...""") to appear inside a block string</string>
                <key>name</key>
                <string>invalid.illegal.content-before-closing-delimiter.swift</string>
                <key>match</key>
                <string>\S((?!\\#\().)*(?=""")</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.double.block.raw.swift</string>
            <key>begin</key>
            <string>(##+)"""</string>
            <key>end</key>
            <string>"""\1(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.content-after-opening-delimiter.swift</string>
                <key>match</key>
                <string>\G.+(?=""")|\G.+</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.double.single-line.swift</string>
            <key>begin</key>
            <string>"</string>
            <key>end</key>
            <string>"(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.returns-not-allowed.swift</string>
                <key>match</key>
                <string>\r|\n</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literals-string-string-guts</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0168: raw string literals (more than one #, grammar limitations prevent us from supporting escapes)</string>
            <key>name</key>
            <string>string.quoted.double.single-line.raw.swift</string>
            <key>begin</key>
            <string>(##+)"</string>
            <key>end</key>
            <string>"\1(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.raw.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.raw.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.returns-not-allowed.swift</string>
                <key>match</key>
                <string>\r|\n</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>comment</key>
            <string>SE-0168: raw string literals (one #, escapes supported)</string>
            <key>name</key>
            <string>string.quoted.double.single-line.raw.swift</string>
            <key>begin</key>
            <string>#"</string>
            <key>end</key>
            <string>"#(#*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.raw.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.raw.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.extra-closing-delimiter.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>invalid.illegal.returns-not-allowed.swift</string>
                <key>match</key>
                <string>\r|\n</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#literals-string-raw-string-guts</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>literals-string-raw-string-guts</key>
      <dict>
        <key>comment</key>
        <string>the same as #string-guts but with # in escapes</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.swift</string>
            <key>match</key>
            <string>\\#[0\\tnr"']</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.unicode.swift</string>
            <key>match</key>
            <string>\\#u\{[0-9a-fA-F]{1,8}\}</string>
          </dict>
          <dict>
            <key>contentName</key>
            <string>source.swift</string>
            <key>name</key>
            <string>meta.embedded.line.swift</string>
            <key>begin</key>
            <string>\\#\(</string>
            <key>end</key>
            <string>(\))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>source.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Nested parens</string>
                <key>begin</key>
                <string>\(</string>
                <key>end</key>
                <string>\)</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.escape-not-recognized</string>
            <key>match</key>
            <string>\\#.</string>
          </dict>
        </array>
      </dict>
      <key>literals-string-string-guts</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.swift</string>
            <key>match</key>
            <string>\\[0\\tnr"']</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.unicode.swift</string>
            <key>match</key>
            <string>\\u\{[0-9a-fA-F]{1,8}\}</string>
          </dict>
          <dict>
            <key>contentName</key>
            <string>source.swift</string>
            <key>name</key>
            <string>meta.embedded.line.swift</string>
            <key>begin</key>
            <string>\\\(</string>
            <key>end</key>
            <string>(\))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.begin.swift</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.section.embedded.end.swift</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>source.swift</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>$self</string>
              </dict>
              <dict>
                <key>comment</key>
                <string>Nested parens</string>
                <key>begin</key>
                <string>\(</string>
                <key>end</key>
                <string>\)</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.escape-not-recognized</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>member-reference</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;=\.)((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.swift</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.identifier.swift</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>comment</key>
            <string>Type casting</string>
            <key>name</key>
            <string>keyword.operator.type-casting.swift</string>
            <key>match</key>
            <string>\b(is\b|as([!?]\B|\b))</string>
          </dict>
          <dict>
            <key>comment</key>
            <string>This rule helps us speed up the matching.</string>
            <key>begin</key>
            <string>(?x)
(?=
  (?&lt;oph&gt;                # operator-head
    [/=\-+!*%&lt;&gt;&amp;|^~?]
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  )
  | \.
  (
    \g&lt;oph&gt;              # operator-head
    | \.
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)</string>
            <key>end</key>
            <string>(?!\G)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>comment</key>
                <string>Prefix unary operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
(?&lt;=^|[\s(\[{,;:])
(
  (?!(//|/\*|\*/))
  (
    [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++
(?![\s)\]},;:]|\z)</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.increment-or-decrement.swift</string>
                        <key>match</key>
                        <string>\G(\+\+|\-\-)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.unary.swift</string>
                        <key>match</key>
                        <string>\G(\+|\-)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.logical.not.swift</string>
                        <key>match</key>
                        <string>\G!$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.bitwise.not.swift</string>
                        <key>match</key>
                        <string>\G~$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.prefix.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>comment</key>
                <string>Postfix unary operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
(?&lt;!^|[\s(\[{,;:])
(
  (?!(//|/\*|\*/))
  (
    [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++
(?=[\s)\]},;:]|\z)</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.increment-or-decrement.swift</string>
                        <key>match</key>
                        <string>\G(\+\+|\-\-)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.increment-or-decrement.swift</string>
                        <key>match</key>
                        <string>\G!$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.postfix.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>comment</key>
                <string>Infix operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
(
  (?!(//|/\*|\*/))
  (
    [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.assignment.swift</string>
                        <key>match</key>
                        <string>\G=$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.assignment.compound.swift</string>
                        <key>match</key>
                        <string>\G(\+|\-|\*|/|%|&lt;&lt;|&gt;&gt;|&amp;|\^|\||&amp;&amp;|\|\|)=$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.swift</string>
                        <key>match</key>
                        <string>\G(\+|\-|\*|/)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.overflow.swift</string>
                        <key>match</key>
                        <string>\G&amp;(\+|\-|\*)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.arithmetic.remainder.swift</string>
                        <key>match</key>
                        <string>\G%$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.comparison.swift</string>
                        <key>match</key>
                        <string>\G(==|!=|&gt;|&lt;|&gt;=|&lt;=|~=)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.coalescing.swift</string>
                        <key>match</key>
                        <string>\G\?\?$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.logical.swift</string>
                        <key>match</key>
                        <string>\G(&amp;&amp;|\|\|)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.bitwise.swift</string>
                        <key>match</key>
                        <string>\G(&amp;|\||\^|&lt;&lt;|&gt;&gt;)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.bitwise.swift</string>
                        <key>match</key>
                        <string>\G(===|!==)$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.ternary.swift</string>
                        <key>match</key>
                        <string>\G\?$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.infix.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>comment</key>
                <string>Dot prefix unary operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
(?&lt;=^|[\s(\[{,;:])
\.                    # dot
(
  (?!(//|/\*|\*/))
  (
    \.                # dot
    | [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++
(?![\s)\]},;:]|\z)</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.prefix.dot.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>comment</key>
                <string>Dot postfix unary operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
(?&lt;!^|[\s(\[{,;:])
\.                    # dot
(
  (?!(//|/\*|\*/))
  (
    \.                # dot
    | [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++
(?=[\s)\]},;:]|\z)</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.postfix.dot.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>comment</key>
                <string>Dot infix operator</string>
                <key>match</key>
                <string>(?x)
\G                    # Matching from the beginning ensures
                    # that we start with operator-head
\.                    # dot
(
  (?!(//|/\*|\*/))
  (
    \.                # dot
    | [/=\-+!*%&lt;&gt;&amp;|^~?]        # operator-head
    | [\x{00A1}-\x{00A7}]
    | [\x{00A9}\x{00AB}]
    | [\x{00AC}\x{00AE}]
    | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
    | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
    | [\x{2030}-\x{203E}]
    | [\x{2041}-\x{2053}]
    | [\x{2055}-\x{205E}]
    | [\x{2190}-\x{23FF}]
    | [\x{2500}-\x{2775}]
    | [\x{2794}-\x{2BFF}]
    | [\x{2E00}-\x{2E7F}]
    | [\x{3001}-\x{3003}]
    | [\x{3008}-\x{3030}]
  
    | [\x{0300}-\x{036F}]        # operator-character
    | [\x{1DC0}-\x{1DFF}]
    | [\x{20D0}-\x{20FF}]
    | [\x{FE00}-\x{FE0F}]
    | [\x{FE20}-\x{FE2F}]
    | [\x{E0100}-\x{E01EF}]
  )
)++</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.range.swift</string>
                        <key>match</key>
                        <string>\G\.\.[.&lt;]$</string>
                      </dict>
                      <dict>
                        <key>name</key>
                        <string>keyword.operator.custom.infix.dot.swift</string>
                        <key>match</key>
                        <string>.+</string>
                      </dict>
                    </array>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.ternary.swift</string>
            <key>match</key>
            <string>:</string>
          </dict>
        </array>
      </dict>
      <key>root</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#compiler-control</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declarations</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressions</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>