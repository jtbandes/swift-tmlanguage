import test, { suite } from "node:test";
import type { LanguageRegistration } from "shiki";

import swiftGrammar from "../Swift.tmLanguage.json" with { type: "json" };
import { $, _, createAssertScopes } from "./assert-scopes.ts";

const assertScopes = await createAssertScopes(swiftGrammar as unknown as LanguageRegistration);

await suite("regex literals", async () => {
  await test("disambiguation with operators", () => {
    assertScopes(
      $`foo(/a, b/)`,
      _`~~~~~~~~~~~ meta.function-call.swift`,
      _`~~~         support.function.any-method.swift`,
      _`   ~        punctuation.definition.arguments.begin.swift`,
      _`    ~~~~~~  string.regexp.line.swift`,
      _`          ~ punctuation.definition.arguments.end.swift`,
    );
    assertScopes(
      $`foo((/a), b/)`,
      _`~~~~~~~~~~~~~ meta.function-call.swift`,
      _`~~~           support.function.any-method.swift`,
      _`   ~          punctuation.definition.arguments.begin.swift`,
      _`    ~         punctuation.section.tuple.begin.swift`,
      _`     ~        keyword.operator.custom.prefix.swift`,
      _`       ~      punctuation.section.tuple.end.swift`,
      _`           ~  keyword.operator.custom.postfix.swift`,
      _`            ~ punctuation.definition.arguments.end.swift`,
    );
    assertScopes(
      $`qux((/), !/)`,
      _`~~~~~~~~~~~~ meta.function-call.swift`,
      _`~~~          support.function.any-method.swift`,
      _`   ~         punctuation.definition.arguments.begin.swift`,
      _`    ~        punctuation.section.tuple.begin.swift`,
      _`     ~       keyword.operator.custom.infix.swift`,
      _`      ~      punctuation.section.tuple.end.swift`,
      _`         ~~  keyword.operator.custom.infix.swift`,
      _`           ~ punctuation.definition.arguments.end.swift`,
    );
    assertScopes(
      $`qux((/),/)`,
      _`~~~~~~~~~~ meta.function-call.swift`,
      _`~~~        support.function.any-method.swift`,
      _`   ~       punctuation.definition.arguments.begin.swift`,
      _`    ~      punctuation.section.tuple.begin.swift`,
      _`     ~     keyword.operator.custom.infix.swift`,
      _`      ~    punctuation.section.tuple.end.swift`,
      _`        ~  keyword.operator.custom.infix.swift`,
      _`         ~ punctuation.definition.arguments.end.swift`,
    );
    assertScopes(
      $`qux(/, /)`,
      _`~~~~~~~~~ meta.function-call.swift`,
      _`~~~       support.function.any-method.swift`,
      _`   ~      punctuation.definition.arguments.begin.swift`,
      _`    ~     keyword.operator.custom.infix.swift`,
      _`       ~  keyword.operator.custom.infix.swift`,
      _`        ~ punctuation.definition.arguments.end.swift`,
    );
    assertScopes(
      $`let f = (/^x)/`,
      _`~~~            keyword.other.declaration-specifier.swift`,
      _`      ~        keyword.operator.custom.infix.swift`,
      _`        ~      punctuation.section.tuple.begin.swift`,
      _`         ~~    keyword.operator.custom.prefix.swift`,
      _`            ~  punctuation.section.tuple.end.swift`,
      _`             ~ keyword.operator.custom.postfix.swift`,
    );

    assertScopes(
      $`let r = ^^/x/`, // FIXME
      _`~~~           keyword.other.declaration-specifier.swift`,
      _`      ~       keyword.operator.custom.infix.swift`,
      _`        ~~~   keyword.operator.custom.prefix.swift`,
      _`            ~ keyword.operator.custom.postfix.swift`,
      $`let r = ^^(/x/)`,
      _`~~~             keyword.other.declaration-specifier.swift`,
      _`      ~         keyword.operator.custom.infix.swift`,
      _`        ~~      keyword.operator.custom.prefix.swift`,
      _`          ~     punctuation.section.tuple.begin.swift`,
      _`           ~~~  string.regexp.line.swift`,
      _`              ~ punctuation.section.tuple.end.swift`,
    );

    assertScopes(
      $`let broken = x+/y/`,
      _`~~~                keyword.other.declaration-specifier.swift`,
      _`           ~       keyword.operator.custom.infix.swift`,
      _`              ~~   keyword.operator.custom.infix.swift`,
      _`                 ~ keyword.operator.custom.postfix.swift`,

      $`let fixed1 = x + /y/`,
      _`~~~                  keyword.other.declaration-specifier.swift`,
      _`           ~         keyword.operator.custom.infix.swift`,
      _`               ~     keyword.operator.custom.infix.swift`,
      _`                 ~~~ string.regexp.line.swift`,

      $`let fixed2 = x+#/y/#`,
      _`~~~                  keyword.other.declaration-specifier.swift`,
      _`           ~         keyword.operator.custom.infix.swift`,
      _`              ~      keyword.operator.custom.infix.swift`,
      _`               ~~~~~ string.regexp.line.swift`,
    );
  });

  await test("leading and trailing whitespace rules", () => {
    assertScopes(
      // A regex literal may not start or end with a space or tab.
      $`let r = / x/`,
      _`~~~          keyword.other.declaration-specifier.swift`,
      _`      ~      keyword.operator.custom.infix.swift`,
      _`        ~    keyword.operator.custom.infix.swift`,
      _`           ~ keyword.operator.custom.postfix.swift`,
      $`let r = /x /`,
      _`~~~          keyword.other.declaration-specifier.swift`,
      _`      ~      keyword.operator.custom.infix.swift`,
      _`        ~    keyword.operator.custom.prefix.swift`,
      _`           ~ keyword.operator.custom.infix.swift`,

      $`let r = #/ x/#`,
      _`~~~            keyword.other.declaration-specifier.swift`,
      _`      ~        keyword.operator.custom.infix.swift`,
      _`        ~~~~~~ string.regexp.line.swift`,
      $`let r = #/x /#`,
      _`~~~            keyword.other.declaration-specifier.swift`,
      _`      ~        keyword.operator.custom.infix.swift`,
      _`        ~~~~~~ string.regexp.line.swift`,
    );

    assertScopes(
      $`let r = /\ /`,
      _`~~~          keyword.other.declaration-specifier.swift`,
      _`      ~      keyword.operator.custom.infix.swift`,
      _`        ~~~~ string.regexp.line.swift`,
      _`         ~~  constant.character.escape.backslash.regexp`,

      $`let r = /\ x/`,
      _`~~~           keyword.other.declaration-specifier.swift`,
      _`      ~       keyword.operator.custom.infix.swift`,
      _`        ~~~~~ string.regexp.line.swift`,
      _`         ~~   constant.character.escape.backslash.regexp`,

      $`let err = /\  /`, // may not end with a space
      _`~~~             keyword.other.declaration-specifier.swift`,
      _`        ~       keyword.operator.custom.infix.swift`,
      _`          ~     keyword.operator.custom.prefix.swift`,
      _`              ~ keyword.operator.custom.infix.swift`,

      $`let err = /\ a /`, // may not end with a space
      _`~~~              keyword.other.declaration-specifier.swift`,
      _`        ~        keyword.operator.custom.infix.swift`,
      _`          ~      keyword.operator.custom.prefix.swift`,
      _`               ~ keyword.operator.custom.infix.swift`,

      $`let ok = #/ a /#`, // extended literals can end with a space
      _`~~~              keyword.other.declaration-specifier.swift`,
      _`       ~         keyword.operator.custom.infix.swift`,
      _`         ~~~~~~~ string.regexp.line.swift`,

      $`let ok = #/\ a /#`, // extended literals can end with a space
      _`~~~               keyword.other.declaration-specifier.swift`,
      _`       ~          keyword.operator.custom.infix.swift`,
      _`         ~~~~~~~~ string.regexp.line.swift`,
      _`           ~~     constant.character.escape.backslash.regexp`,

      $`let ok = #/\ /#`, // extended literals can end with a space
      _`~~~             keyword.other.declaration-specifier.swift`,
      _`       ~        keyword.operator.custom.infix.swift`,
      _`         ~~~~~~ string.regexp.line.swift`,
      _`           ~~   constant.character.escape.backslash.regexp`,
    );

    assertScopes(
      $`/ [+-] /`,
      _`~        keyword.operator.custom.infix.swift`,
      _`   ~~    keyword.operator.custom.infix.swift`,
      _`       ~ keyword.operator.custom.infix.swift`,

      $`/\ [+-] /`, // typo in SE-0354?
      _`~         keyword.operator.custom.prefix.swift`,
      _`    ~~    keyword.operator.custom.infix.swift`,
      _`        ~ keyword.operator.custom.infix.swift`,

      $`/\ [+-]/`,
      _`~~~~~~~~ string.regexp.line.swift`,
      _` ~~      constant.character.escape.backslash.regexp`,
      _`   ~~~~  constant.other.character-class.set.regexp`,
      _`   ~     punctuation.definition.character-class.regexp`,
      _`      ~  punctuation.definition.character-class.regexp`,

      $`#/ [+-] /#`,
      _`~~~~~~~~~~ string.regexp.line.swift`,
      _`   ~~~~    constant.other.character-class.set.regexp`,
      _`   ~       punctuation.definition.character-class.regexp`,
      _`      ~    punctuation.definition.character-class.regexp`,
    );
  });

  await test("extended literals", () => {
    assertScopes(
      $`let empty = #//#`,
      _`~~~              keyword.other.declaration-specifier.swift`,
      _`          ~      keyword.operator.custom.infix.swift`,
      _`            ~~~~ string.regexp.line.swift`,
    );

    assertScopes(
      $`r = #/abc/#`,
      _`  ~         keyword.operator.custom.infix.swift`,
      _`    ~~~~~~~ string.regexp.line.swift`,

      $`r = ##/a/#bc/##`,
      _`  ~             keyword.operator.custom.infix.swift`,
      _`    ~~~~~~~~~~~ string.regexp.line.swift`,
    );

    assertScopes(
      $`foo(/abc/, #/abc/#, ##/abc/##)`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ meta.function-call.swift`,
      _`~~~                            support.function.any-method.swift`,
      _`   ~                           punctuation.definition.arguments.begin.swift`,
      _`    ~~~~~                      string.regexp.line.swift`,
      _`           ~~~~~~~             string.regexp.line.swift`,
      _`                    ~~~~~~~~~  string.regexp.line.swift`,
      _`                             ~ punctuation.definition.arguments.end.swift`,
    );

    assertScopes(
      // note: EOL here is supposed be captured as invalid.illegal, seems to work in textmate but not shiki
      $`let unterminated = #/ / /  / ab#/`,
      _`~~~                               keyword.other.declaration-specifier.swift`,
      _`                 ~                keyword.operator.custom.infix.swift`,
      _`                   ~~~~~~~~~~~~~~¶ string.regexp.line.swift`,
      $`let broken = x+/y/`,
      _`~~~                keyword.other.declaration-specifier.swift`,
      _`           ~       keyword.operator.custom.infix.swift`,
      _`              ~~   keyword.operator.custom.infix.swift`,
      _`                 ~ keyword.operator.custom.postfix.swift`,
      $`let fixed1 = x + /y/`,
      _`~~~                  keyword.other.declaration-specifier.swift`,
      _`           ~         keyword.operator.custom.infix.swift`,
      _`               ~     keyword.operator.custom.infix.swift`,
      _`                 ~~~ string.regexp.line.swift`,
    );
  });

  await test("quoting", () => {
    assertScopes(
      $`/\Q^[xy]+$\E/`,
      _`~~~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~~~  string.quoted.other.regexp.swift`,
      _` ~~           constant.character.escape.backslash.regexp`,
      _`          ~~  constant.character.escape.backslash.regexp`,
    );

    assertScopes(
      $`/[a\Q]\E]/`, // character class of ']' and 'a'
      _`~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~  constant.other.character-class.set.regexp`,
      _` ~         punctuation.definition.character-class.regexp`,
      _`   ~~~~~   string.quoted.other.regexp.swift`,
      _`   ~~      constant.character.escape.backslash.regexp`,
      _`      ~~   constant.character.escape.backslash.regexp`,
      _`        ~  punctuation.definition.character-class.regexp`,

      $`/\Q\\E/`, // \E cannot be escaped so this is a literal backslash
      _`~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~  string.quoted.other.regexp.swift`,
      _` ~~     constant.character.escape.backslash.regexp`,
      _`    ~~  constant.character.escape.backslash.regexp`,
    );
  });

  await test("comments", () => {
    assertScopes(
      $`let comments = #/`,
      _`~~~               keyword.other.declaration-specifier.swift`,
      _`             ~    keyword.operator.custom.infix.swift`,
      _`               ~~¶ string.regexp.block.swift`,

      $`  not a comment`,
      _`~~~~~~~~~~~~~~~¶ string.regexp.block.swift`,

      $`  # line comment`,
      _`~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~ comment.line.regexp`,
      _`  ~              punctuation.definition.comment.regexp`,

      $`  \Q#quoted comment\E`,
      _`~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~ string.quoted.other.regexp.swift`,
      _`  ~~                  constant.character.escape.backslash.regexp`,
      _`                   ~~ constant.character.escape.backslash.regexp`,

      $`  not a comment # line comment`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`                ~~~~~~~~~~~~~~ comment.line.regexp`,
      _`                ~              punctuation.definition.comment.regexp`,

      $`  not a comment`,
      _`~~~~~~~~~~~~~~~¶ string.regexp.block.swift`,

      $`  ( (?# (?#comment  (?# nesting and escaping not allowed \) )`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~                                                           punctuation.definition.group.regexp`,
      _`    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   comment.block.regexp`,
      _`    ~~~                                                       punctuation.definition.comment.begin.regexp`,
      _`                                                          ~   punctuation.definition.comment.end.regexp`,
      _`                                                            ~ punctuation.definition.group.regexp`,

      $`  not a comment`,
      _`~~~~~~~~~~~~~~~¶ string.regexp.block.swift`,

      $`/#`,
      _`~~ string.regexp.block.swift`,
    );

    assertScopes(
      $`let r = /# not a comment/`,
      _`~~~                       keyword.other.declaration-specifier.swift`,
      _`      ~                   keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
    );

    assertScopes(
      $`let r = /( (?# (?# nesting and escaping not allowed \) )/`,
      _`~~~                                                       keyword.other.declaration-specifier.swift`,
      _`      ~                                                   keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  meta.group.regexp`,
      _`         ~                                                punctuation.definition.group.regexp`,
      _`           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    comment.block.regexp`,
      _`           ~~~                                            punctuation.definition.comment.begin.regexp`,
      _`                                                     ~    punctuation.definition.comment.end.regexp`,
      _`                                                       ~  punctuation.definition.group.regexp`,
    );

    assertScopes(
      // line comments only work when #/ is followed by a newline
      $`let r = #/# not a comment/#`,
      _`~~~                         keyword.other.declaration-specifier.swift`,
      _`      ~                     keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,

      $`let r = #/`,
      _`~~~        keyword.other.declaration-specifier.swift`,
      _`      ~    keyword.operator.custom.infix.swift`,
      _`        ~~¶ string.regexp.block.swift`,
      $`#comment`,
      _`~~~~~~~~ string.regexp.block.swift, comment.line.regexp`,
      _`~        punctuation.definition.comment.regexp`,
      $`\Q#quoted comment\E`,
      _`~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift, string.quoted.other.regexp.swift`,
      _`~~                  constant.character.escape.backslash.regexp`,
      _`                 ~~ constant.character.escape.backslash.regexp`,
      $`/#`,
      _`~~ string.regexp.block.swift`,
    );
  });

  await test("entities", () => {
    assertScopes(
      $`let r = /^\a\b[\b]\cX\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z$/`,
      _`~~~                                                                   keyword.other.declaration-specifier.swift`,
      _`      ~                                                               keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`         ~                                                            keyword.control.anchor.regexp`,
      _`          ~~                                                          constant.character.escape.backslash.regexp`,
      _`            ~~                                                        keyword.control.anchor.regexp`,
      _`              ~                                                       constant.other.character-class.set.regexp, punctuation.definition.character-class.regexp`,
      _`               ~~                                                     constant.other.character-class.set.regexp, constant.character.escape.backslash.regexp`,
      _`                 ~                                                    constant.other.character-class.set.regexp, punctuation.definition.character-class.regexp`,
      _`                  ~~~                                                 constant.character.entity.control-character.regexp`,
      _`                     ~~                                               constant.character.character-class.regexp`,
      _`                       ~~                                             constant.character.escape.backslash.regexp`,
      _`                         ~~                                           constant.character.escape.backslash.regexp`,
      _`                           ~~                                         constant.character.escape.backslash.regexp`,
      _`                             ~~                                       constant.character.character-class.regexp`,
      _`                               ~~                                     constant.character.escape.backslash.regexp`,
      _`                                 ~~                                   constant.character.escape.backslash.regexp`,
      _`                                   ~~                                 constant.character.escape.backslash.regexp`,
      _`                                     ~~                               constant.character.escape.backslash.regexp`,
      _`                                       ~~                             constant.character.escape.backslash.regexp`,
      _`                                         ~~                           constant.character.escape.backslash.regexp`,
      _`                                           ~~                         constant.character.escape.backslash.regexp`,
      _`                                             ~~                       constant.character.escape.backslash.regexp`,
      _`                                               ~~                     constant.character.escape.backslash.regexp`,
      _`                                                 ~~                   constant.character.escape.backslash.regexp`,
      _`                                                   ~~                 constant.character.character-class.regexp`,
      _`                                                     ~~               constant.character.escape.backslash.regexp`,
      _`                                                       ~~             constant.character.escape.backslash.regexp`,
      _`                                                         ~~           constant.character.character-class.regexp`,
      _`                                                           ~~         constant.character.character-class.regexp`,
      _`                                                             ~~       constant.character.numeric.regexp`,
      _`                                                               ~~     keyword.control.anchor.regexp`,
      _`                                                                 ~~   keyword.control.anchor.regexp`,
      _`                                                                   ~  keyword.control.anchor.regexp`,

      $`let r = /^\A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P.\R\S\T\U\V\W\X\Y\Z$/`,
      _`~~~                                                             keyword.other.declaration-specifier.swift`,
      _`      ~                                                         keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`         ~                                                      keyword.control.anchor.regexp`,
      _`          ~~                                                    keyword.control.anchor.regexp`,
      _`            ~~                                                  keyword.control.anchor.regexp`,
      _`              ~~                                                constant.character.character-class.regexp`,
      _`                ~~                                              constant.character.character-class.regexp`,
      _`                  ~~                                            constant.character.escape.backslash.regexp`,
      _`                    ~~                                          constant.character.escape.backslash.regexp`,
      _`                      ~~                                        keyword.control.anchor.regexp`,
      _`                        ~~                                      constant.character.character-class.regexp`,
      _`                          ~~                                    constant.character.escape.backslash.regexp`,
      _`                            ~~                                  constant.character.escape.backslash.regexp`,
      _`                              ~~                                keyword.control.anchor.regexp`,
      _`                                ~~                              constant.character.escape.backslash.regexp`,
      _`                                  ~~                            constant.character.escape.backslash.regexp`,
      _`                                    ~~                          constant.character.character-class.regexp`,
      _`                                      ~~                        constant.character.character-class.regexp`,
      _`                                        ~~                      constant.character.escape.backslash.regexp`,
      _`                                          ~                     constant.character.character-class.regexp`,
      _`                                           ~~                   constant.character.character-class.regexp`,
      _`                                             ~~                 constant.character.character-class.regexp`,
      _`                                               ~~               constant.character.escape.backslash.regexp`,
      _`                                                 ~~             constant.character.escape.backslash.regexp`,
      _`                                                   ~~           constant.character.character-class.regexp`,
      _`                                                     ~~         constant.character.character-class.regexp`,
      _`                                                       ~~       constant.character.character-class.regexp`,
      _`                                                         ~~     keyword.control.anchor.regexp`,
      _`                                                           ~~   keyword.control.anchor.regexp`,
      _`                                                             ~  keyword.control.anchor.regexp`,

      $`let r = /8\u12345\u{ 1 2 3 }\x\x{af}\U89abcdef9\o{12}\07778\N\N{a}\N{U+1a}\N{x-y z}/`,
      _`~~~                                                                                  keyword.other.declaration-specifier.swift`,
      _`      ~                                                                              keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`          ~~~~~~                                                                     constant.character.numeric.regexp`,
      _`                 ~~~~~~~~~~~                                                         constant.character.numeric.regexp`,
      _`                            ~~                                                       constant.character.numeric.regexp`,
      _`                              ~~~~~~                                                 constant.character.numeric.regexp`,
      _`                                    ~~~~~~~~~~                                       constant.character.numeric.regexp`,
      _`                                               ~~~~~~                                constant.character.numeric.regexp`,
      _`                                                     ~~~~~                           constant.character.numeric.regexp`,
      _`                                                           ~~                        constant.character.character-class.regexp`,
      _`                                                             ~~~~~                   constant.character.numeric.regexp`,
      _`                                                                  ~~~~~~~~           constant.character.numeric.regexp`,
      _`                                                                          ~~~~~~~~~  constant.character.numeric.regexp`,

      $`let r = /\p{is-White_Space a = a} x [:a=b:] [:script=Latin:] \p{alnum}/`,
      _`~~~                                                                     keyword.other.declaration-specifier.swift`,
      _`      ~                                                                 keyword.operator.custom.infix.swift`,
      _`        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`         ~~~~~~~~~~~~~~~~~~~~~~~~                                       constant.other.character-class.set.regexp`,
      _`            ~~~~~~~~~~~~~~~~~~~~                                        support.variable.character-property.regexp`,
      _`                                    ~~~~~~~                             constant.other.character-class.set.regexp`,
      _`                                    ~~                                  punctuation.definition.character-class.regexp`,
      _`                                      ~~~                               support.variable.character-property.regexp`,
      _`                                         ~~                             punctuation.definition.character-class.regexp`,
      _`                                            ~~~~~~~~~~~~~~~~            constant.other.character-class.set.regexp`,
      _`                                            ~~                          punctuation.definition.character-class.regexp`,
      _`                                              ~~~~~~~~~~~~              support.variable.character-property.regexp`,
      _`                                                          ~~            punctuation.definition.character-class.regexp`,
      _`                                                             ~~~~~~~~~  constant.other.character-class.set.regexp`,
      _`                                                                ~~~~~   support.variable.character-property.regexp`,
    );
  });

  await test("groups", () => {
    assertScopes(
      $`let groups = #/`,
      _`~~~             keyword.other.declaration-specifier.swift`,
      _`           ~    keyword.operator.custom.infix.swift`,
      _`             ~~¶ string.regexp.block.swift`,
      $`  (?:abc)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?|a|b)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`      ~   keyword.operator.or.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?>abc)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?=abc)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?!abc)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?<=abc)`,
      _`~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~ meta.group.regexp`,
      _`  ~        punctuation.definition.group.regexp`,
      _`   ~~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`         ~ punctuation.definition.group.regexp`,
      $`  (?<!abc)`,
      _`~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~ meta.group.regexp`,
      _`  ~        punctuation.definition.group.regexp`,
      _`   ~~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`         ~ punctuation.definition.group.regexp`,
      $`  (?*abc)`,
      _`~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~ meta.group.regexp`,
      _`  ~       punctuation.definition.group.regexp`,
      _`   ~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~ punctuation.definition.group.regexp`,
      $`  (?<*abc)`,
      _`~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~ meta.group.regexp`,
      _`  ~        punctuation.definition.group.regexp`,
      _`   ~~~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`         ~ punctuation.definition.group.regexp`,
      $`  (*negative_lookbehind:abc) (*nlb:abc) (*nlbfoo)`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~~~~~~~~                      meta.group.regexp`,
      _`  ~                                               punctuation.definition.group.regexp`,
      _`   ~~~~~~~~~~~~~~~~~~~~~                          keyword.other.group-options.regexp`,
      _`                           ~                      punctuation.definition.group.regexp`,
      _`                             ~~~~~~~~~~           meta.group.regexp`,
      _`                             ~                    punctuation.definition.group.regexp`,
      _`                              ~~~~~               keyword.other.group-options.regexp`,
      _`                                      ~           punctuation.definition.group.regexp`,
      _`                                        ~~~~~~~~~ meta.callout.regexp`,
      _`                                        ~         punctuation.definition.group.regexp`,
      _`                                         ~        keyword.control.callout.regexp`,
      _`                                          ~~~~~~  entity.name.function.callout.regexp`,
      _`                                                ~ punctuation.definition.group.regexp`,
      $`  (?xi) (?y{g})`,
      _`~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~         keyword.other.option-toggle.regexp`,
      _`        ~~~~~~~ keyword.other.option-toggle.regexp`,
      $`  (?xiy{g}:abc)`,
      _`~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~             punctuation.definition.group.regexp`,
      _`   ~            keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`    ~~~~~~~     keyword.other.group-options.regexp`,
      _`              ~ punctuation.definition.group.regexp`,
      $`  (?xi:a b c) (?x:s)`,
      _`~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~        meta.group.regexp`,
      _`  ~                  punctuation.definition.group.regexp`,
      _`   ~                 keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`    ~~~              keyword.other.group-options.regexp`,
      _`            ~        punctuation.definition.group.regexp`,
      _`              ~~~~~~ meta.group.regexp`,
      _`              ~      punctuation.definition.group.regexp`,
      _`               ~     keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`                ~~   keyword.other.group-options.regexp`,
      _`                   ~ punctuation.definition.group.regexp`,
      $`  (?P<ab-c>def)`,
      _`~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~             punctuation.definition.group.regexp`,
      _`   ~~~~~~~~     keyword.other.group-options.regexp`,
      _`   ~            punctuation.definition.group.regexp`,
      _`      ~~        variable.other.group-name.regexp`,
      _`        ~       keyword.operator.balancing-group.regexp`,
      _`         ~      variable.other.group-name.regexp`,
      _`              ~ punctuation.definition.group.regexp`,
      $`  (?<abc>def)`,
      _`~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~ meta.group.regexp`,
      _`  ~           punctuation.definition.group.regexp`,
      _`   ~~~~~~     keyword.other.group-options.regexp`,
      _`   ~          punctuation.definition.group.regexp`,
      _`     ~~~      variable.other.group-name.regexp`,
      _`            ~ punctuation.definition.group.regexp`,
      $`  (?'abc'def)`,
      _`~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~ meta.group.regexp`,
      _`  ~           punctuation.definition.group.regexp`,
      _`   ~~~~~~     keyword.other.group-options.regexp`,
      _`   ~          punctuation.definition.group.regexp`,
      _`     ~~~      variable.other.group-name.regexp`,
      _`            ~ punctuation.definition.group.regexp`,
      $`  (?'Close-Open'>)`,
      _`~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~                punctuation.definition.group.regexp`,
      _`   ~~~~~~~~~~~~~   keyword.other.group-options.regexp`,
      _`   ~               punctuation.definition.group.regexp`,
      _`     ~~~~~         variable.other.group-name.regexp`,
      _`          ~        keyword.operator.balancing-group.regexp`,
      _`           ~~~~    variable.other.group-name.regexp`,
      _`                 ~ punctuation.definition.group.regexp`,

      $`  (a((?:b)(?<c>c)d)(e)f)`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~                      punctuation.definition.group.regexp`,
      _`    ~~~~~~~~~~~~~~~      meta.group.regexp`,
      _`    ~                    punctuation.definition.group.regexp`,
      _`     ~~~~~               meta.group.regexp`,
      _`     ~                   punctuation.definition.group.regexp`,
      _`      ~~                 keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`         ~               punctuation.definition.group.regexp`,
      _`          ~~~~~~~        meta.group.regexp`,
      _`          ~              punctuation.definition.group.regexp`,
      _`           ~~~~          keyword.other.group-options.regexp`,
      _`           ~             punctuation.definition.group.regexp`,
      _`             ~           variable.other.group-name.regexp`,
      _`                ~        punctuation.definition.group.regexp`,
      _`                  ~      punctuation.definition.group.regexp`,
      _`                   ~~~   meta.group.regexp`,
      _`                   ~     punctuation.definition.group.regexp`,
      _`                     ~   punctuation.definition.group.regexp`,
      _`                       ~ punctuation.definition.group.regexp`,
      $`  (a()(?|(b)(c)|(?:d)|(e)))(f)`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~~~~~~~    meta.group.regexp`,
      _`  ~                            punctuation.definition.group.regexp`,
      _`    ~~                         meta.group.regexp, punctuation.definition.group.regexp`,
      _`      ~~~~~~~~~~~~~~~~~~~~     meta.group.regexp`,
      _`      ~                        punctuation.definition.group.regexp`,
      _`       ~                       keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`        ~                      keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`         ~~~                   meta.group.regexp`,
      _`         ~                     punctuation.definition.group.regexp`,
      _`           ~                   punctuation.definition.group.regexp`,
      _`            ~~~                meta.group.regexp`,
      _`            ~                  punctuation.definition.group.regexp`,
      _`              ~                punctuation.definition.group.regexp`,
      _`               ~               keyword.operator.or.regexp`,
      _`                ~~~~~          meta.group.regexp`,
      _`                ~              punctuation.definition.group.regexp`,
      _`                 ~~            keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`                    ~          punctuation.definition.group.regexp`,
      _`                     ~         keyword.operator.or.regexp`,
      _`                      ~~~      meta.group.regexp`,
      _`                      ~        punctuation.definition.group.regexp`,
      _`                        ~      punctuation.definition.group.regexp`,
      _`                         ~     punctuation.definition.group.regexp`,
      _`                          ~    punctuation.definition.group.regexp`,
      _`                           ~~~ meta.group.regexp`,
      _`                           ~   punctuation.definition.group.regexp`,
      _`                             ~ punctuation.definition.group.regexp`,
      $`  (?|(?<x>a)|(?<x>b))`,
      _`~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`  ~~~~~~~~~~~~~~~~~~~ meta.group.regexp`,
      _`  ~                   punctuation.definition.group.regexp`,
      _`   ~~                 keyword.other.group-options.regexp, punctuation.definition.group.regexp`,
      _`     ~~~~~~~          meta.group.regexp`,
      _`     ~                punctuation.definition.group.regexp`,
      _`      ~~~~            keyword.other.group-options.regexp`,
      _`      ~               punctuation.definition.group.regexp`,
      _`        ~             variable.other.group-name.regexp`,
      _`           ~          punctuation.definition.group.regexp`,
      _`            ~         keyword.operator.or.regexp`,
      _`             ~~~~~~~  meta.group.regexp`,
      _`             ~        punctuation.definition.group.regexp`,
      _`              ~~~~    keyword.other.group-options.regexp`,
      _`              ~       punctuation.definition.group.regexp`,
      _`                ~     variable.other.group-name.regexp`,
      _`                   ~  punctuation.definition.group.regexp`,
      _`                    ~ punctuation.definition.group.regexp`,
      $`  a(?i)b|c|d = a(?i:b)|(?i:c)|(?i:d)`,
      _`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ string.regexp.block.swift`,
      _`   ~~~~                              keyword.other.option-toggle.regexp`,
      _`        ~                            keyword.operator.or.regexp`,
      _`          ~                          keyword.operator.or.regexp`,
      _`                ~~~~~~               meta.group.regexp`,
      _`                ~                    punctuation.definition.group.regexp`,
      _`                 ~~~                 keyword.other.group-options.regexp`,
      _`                 ~                   punctuation.definition.group.regexp`,
      _`                     ~               punctuation.definition.group.regexp`,
      _`                      ~              keyword.operator.or.regexp`,
      _`                       ~~~~~~        meta.group.regexp`,
      _`                       ~             punctuation.definition.group.regexp`,
      _`                        ~~~          keyword.other.group-options.regexp`,
      _`                        ~            punctuation.definition.group.regexp`,
      _`                            ~        punctuation.definition.group.regexp`,
      _`                             ~       keyword.operator.or.regexp`,
      _`                              ~~~~~~ meta.group.regexp`,
      _`                              ~      punctuation.definition.group.regexp`,
      _`                               ~~~   keyword.other.group-options.regexp`,
      _`                               ~     punctuation.definition.group.regexp`,
      _`                                   ~ punctuation.definition.group.regexp`,
      $`/#`,
      _`~~ string.regexp.block.swift`,
    );
  });

  // https://github.com/swiftlang/swift-evolution/blob/main/proposals/0355-regex-syntax-run-time-construction.md#callouts
  await test("interpolated callouts in single-line literals", () => {
    assertScopes(
      $`/(?{a/b}X)/`,
      _`~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~  meta.callout.regexp`,
      _` ~          punctuation.definition.group.regexp`,
      _`  ~         keyword.control.callout.regexp`,
      _`        ~   keyword.control.callout.regexp`,
      _`         ~  punctuation.definition.group.regexp`,

      $`#/(?{a/b}X)/#`,
      _`~~~~~~~~~~~~~ string.regexp.line.swift`,
      _`  ~~~~~~~~~   meta.callout.regexp`,
      _`  ~           punctuation.definition.group.regexp`,
      _`   ~          keyword.control.callout.regexp`,
      _`         ~    keyword.control.callout.regexp`,
      _`          ~   punctuation.definition.group.regexp`,

      $`/(?{ab/ { c}X)/`,
      _`~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~~~~~  meta.callout.regexp`,
      _` ~              punctuation.definition.group.regexp`,
      _`  ~             keyword.control.callout.regexp`,
      _`            ~   keyword.control.callout.regexp`,
      _`             ~  punctuation.definition.group.regexp`,

      $`/(?{abc/ } d}X)/ //invalid`,
      _.none("string.regexp.line.swift"),

      $`/(?{{abc/ }}}X)/ //invalid`,
      _.none("string.regexp.line.swift"),

      $`/(?{{abc/ }}}}X)/ //invalid`,
      _.none("string.regexp.line.swift"),

      $`/(?{{abc/ }} d}}X)/ //invalid`,
      _.none("string.regexp.line.swift"),

      $`/(?{{abc/ { d}}X)/`,
      _`~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~~~~~~~~  meta.callout.regexp`,
      _` ~                 punctuation.definition.group.regexp`,
      _`  ~                keyword.control.callout.regexp`,
      _`               ~   keyword.control.callout.regexp`,
      _`                ~  punctuation.definition.group.regexp`,

      $`/(?{{abc/ } d}}X)/`,
      _`~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~~~~~~~~  meta.callout.regexp`,
      _` ~                 punctuation.definition.group.regexp`,
      _`  ~                keyword.control.callout.regexp`,
      _`               ~   keyword.control.callout.regexp`,
      _`                ~  punctuation.definition.group.regexp`,

      $`/(?{{abc/ }) d}}X)/`,
      _`~~~~~~~~~~~~~~~~~~~ string.regexp.line.swift`,
      _` ~~~~~~~~~~~~~~~~~  meta.callout.regexp`,
      _` ~                  punctuation.definition.group.regexp`,
      _`  ~                 keyword.control.callout.regexp`,
      _`                ~   keyword.control.callout.regexp`,
      _`                 ~  punctuation.definition.group.regexp`,
    );
  });
});
